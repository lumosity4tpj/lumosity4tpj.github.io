<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>论文阅读-semantic segmentation-Self-supervised Equivariant Attention Mechanism for Weakly Supervised Semantic Segmentation</title>
    <url>/2020/09/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-semantic-segmentation-Self-supervised-Equivariant-Attention-Mechanism-for-Weakly-Supervised-Semantic-Segmentation/</url>
    <content><![CDATA[<html><head><style type="text/css">
                            .mjpage .MJX-monospace {
                            font-family: monospace
                            }

                            .mjpage .MJX-sans-serif {
                            font-family: sans-serif
                            }

                            .mjpage {
                            display: inline;
                            font-style: normal;
                            font-weight: normal;
                            line-height: normal;
                            font-size: 100%;
                            font-size-adjust: none;
                            text-indent: 0;
                            text-align: left;
                            text-transform: none;
                            letter-spacing: normal;
                            word-spacing: normal;
                            word-wrap: normal;
                            white-space: nowrap;
                            float: none;
                            direction: ltr;
                            max-width: none;
                            max-height: none;
                            min-width: 0;
                            min-height: 0;
                            border: 0;
                            padding: 0;
                            margin: 0
                            }

                            .mjpage * {
                            transition: none;
                            -webkit-transition: none;
                            -moz-transition: none;
                            -ms-transition: none;
                            -o-transition: none
                            }

                            .mjx-svg-href {
                            fill: blue;
                            stroke: blue
                            }

                            .MathJax_SVG_LineBox {
                            display: table!important
                            }

                            .MathJax_SVG_LineBox span {
                            display: table-cell!important;
                            width: 10000em!important;
                            min-width: 0;
                            max-width: none;
                            padding: 0;
                            border: 0;
                            margin: 0
                            }

                            .mjpage__block {
                            text-align: center;
                            margin: 1em 0em;
                            position: relative;
                            display: block!important;
                            text-indent: 0;
                            max-width: none;
                            max-height: none;
                            min-width: 0;
                            min-height: 0;
                            width: 100%
                            }</style></head><body><p><img src="/2020/09/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-semantic-segmentation-Self-supervised-Equivariant-Attention-Mechanism-for-Weakly-Supervised-Semantic-Segmentation/1599729595297.png" alt></p>
<h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><ul>
<li><p>基于类别标签的弱监督语义分割通常使用CAM作为基础方法，CAM通常只覆盖物品最具识别性的部分，并且当图像经过仿射变换做数据增强时，生成的CAM并不一致，如下图所示。</p>
</li>
<li><p>原因是强监督与弱监督的语义分割之间存在较大的监督差异，对于强监督语义分割，在数据增强阶段，像素级标签和输入图像经过相同的仿射变换，因而隐式的包含了这种等变性约束，而由类别标签生成的CAM时，类别标签没有变化，因而会影响CAM的训练过程，导致CAM无法很好的贴合目标边界；</p>
</li>
</ul>
<p>  <img src="/2020/09/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-semantic-segmentation-Self-supervised-Equivariant-Attention-Mechanism-for-Weakly-Supervised-Semantic-Segmentation/1599738939441.png" alt></p>
<h3 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h3><ul>
<li>本文提出一种自监督的等变注意力机制(SEAM)，将等变正则化和像素相关模块(PCM)结合，来弥补监督信号之间的差异；</li>
<li>Siamese网络结构的设计与等变交叉正则化(ECR)损失有效地耦合PCM和自我监督，产生的CAM有较少的过激活和欠激活区域；</li>
<li>实验表明，在仅使用图像级标签的情况下就能达到最先进的性能。</li>
</ul>
<a id="more"></a>
<h3 id="本文方法"><a href="#本文方法" class="headerlink" title="本文方法"></a>本文方法</h3><p><img src="/2020/09/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-semantic-segmentation-Self-supervised-Equivariant-Attention-Mechanism-for-Weakly-Supervised-Semantic-Segmentation/1599739866187.png" alt></p>
<p><strong>Equivariant Regularization</strong></p>
<p>在全监督语义分割的数据增强期，对像素级标签采用与输入图像相同的仿射变换。它为网络引入了隐式等变约束。但是，考虑到WSSS只能访问图像级分类标签，这里没有隐含的约束。因此，本文提出以下等变正则化方法:</p>
<span class="mjpage mjpage__block"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="30.572ex" height="2.843ex" style="vertical-align: -0.838ex;" viewbox="0 -863.1 13163 1223.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">
\mathcal{R}_{E R}=\|F(A(I))-A(F(I))\|_{1}</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJCAL-52" d="M37 475Q19 475 19 487Q19 503 35 530T83 589T180 647T327 682H374Q387 682 417 682T464 683Q519 683 559 679T642 663T708 625T731 557Q731 481 668 411T504 300Q506 296 512 286T528 257T553 202Q594 105 611 82Q635 47 665 47Q708 47 742 93Q758 113 786 128Q804 136 819 137Q837 137 837 125Q837 115 818 92T767 43T687 -2T589 -22Q549 -22 517 22T467 120T422 221T362 273Q346 273 346 287Q348 301 373 320T436 342Q437 342 446 343T462 345T481 348T504 353T527 362T553 375T577 393Q598 412 614 443T630 511Q630 545 613 566T541 600T393 614Q370 614 370 613L366 584Q349 446 311 307T243 96L213 25Q205 8 179 -7T132 -22Q125 -22 120 -18T117 -8Q117 -5 130 26T163 113T205 239T246 408T274 606V614Q273 614 259 613T231 609T198 602T163 588Q131 572 113 518Q102 502 80 490T37 475Z"/>
<path stroke-width="1" id="E1-MJMATHI-45" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/>
<path stroke-width="1" id="E1-MJMATHI-52" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/>
<path stroke-width="1" id="E1-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E1-MJMAIN-2225" d="M133 736Q138 750 153 750Q164 750 170 739Q172 735 172 250T170 -239Q164 -250 152 -250Q144 -250 138 -244L137 -243Q133 -241 133 -179T132 250Q132 731 133 736ZM329 739Q334 750 346 750Q353 750 361 744L362 743Q366 741 366 679T367 250T367 -178T362 -243L361 -244Q355 -250 347 -250Q335 -250 329 -239Q327 -235 327 250T329 739Z"/>
<path stroke-width="1" id="E1-MJMATHI-46" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"/>
<path stroke-width="1" id="E1-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E1-MJMATHI-41" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/>
<path stroke-width="1" id="E1-MJMATHI-49" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/>
<path stroke-width="1" id="E1-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E1-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJCAL-52" x="0" y="0"/>
<g transform="translate(848,-150)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-45" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-52" x="764" y="0"/>
</g>
 <use xlink:href="#E1-MJMAIN-3D" x="2303" y="0"/>
 <use xlink:href="#E1-MJMAIN-2225" x="3360" y="0"/>
 <use xlink:href="#E1-MJMATHI-46" x="3860" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="4610" y="0"/>
 <use xlink:href="#E1-MJMATHI-41" x="4999" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="5750" y="0"/>
 <use xlink:href="#E1-MJMATHI-49" x="6139" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="6644" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="7033" y="0"/>
 <use xlink:href="#E1-MJMAIN-2212" x="7645" y="0"/>
 <use xlink:href="#E1-MJMATHI-41" x="8646" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="9396" y="0"/>
 <use xlink:href="#E1-MJMATHI-46" x="9786" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="10535" y="0"/>
 <use xlink:href="#E1-MJMATHI-49" x="10925" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="11429" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="11819" y="0"/>
<g transform="translate(12208,0)">
 <use xlink:href="#E1-MJMAIN-2225" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-31" x="707" y="-213"/>
</g>
</g>
</svg></span><p>F表示这个网络，而A表示空间仿射变换，为了将正则化整合到原始分割网络中，本文将网络扩展为一个权值共享的孪生网络，其中一个分支将该变换应用于网络输出，另一个分支在网络前馈前，对图像进行相同的变换，正则化两个分支的输出激活图，以保证CAM的一致性。</p>
<p><strong>Pixel Correlation Module</strong></p>
<p><img src="/2020/09/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-semantic-segmentation-Self-supervised-Equivariant-Attention-Mechanism-for-Weakly-Supervised-Semantic-Segmentation/1599741401896.png" alt></p>
<p>同时文中引入第二种约束进行自监督，通过PCM利用像素间的相似度去重建原始的类激活图。通过整合每个像素的底层特征来进一步利用上下文信息来细化原始CAM，本文使用归一化特征空间的内积来计算当前像素i和其他像素j之间的相似关系。</p>
<span class="mjpage mjpage__block"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="45.214ex" height="7.676ex" style="vertical-align: -3.338ex;" viewbox="0 -1867.7 19467.1 3304.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-2-Title">
<title id="MathJax-SVG-2-Title">
\mathrm{y}_{i}=\frac{1}{\mathcal{C}\left(\mathrm{x}_{i}\right)} \sum_{\forall j} \operatorname{ReLU}\left(\frac{\theta\left(\mathrm{x}_{i}\right)^{\mathrm{T}} \theta\left(\mathrm{x}_{j}\right)}{\left\|\theta\left(\mathrm{x}_{i}\right)\right\| \cdot\left\|\theta\left(\mathrm{x}_{j}\right)\right\|}\right) \hat{\mathrm{y}}_{j}</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E2-MJMAIN-79" d="M69 -66Q91 -66 104 -80T118 -116Q118 -134 109 -145T91 -160Q84 -163 97 -166Q104 -168 111 -168Q131 -168 148 -159T175 -138T197 -106T213 -75T225 -43L242 0L170 183Q150 233 125 297Q101 358 96 368T80 381Q79 382 78 382Q66 385 34 385H19V431H26L46 430Q65 430 88 429T122 428Q129 428 142 428T171 429T200 430T224 430L233 431H241V385H232Q183 385 185 366L286 112Q286 113 332 227L376 341V350Q376 365 366 373T348 383T334 385H331V431H337H344Q351 431 361 431T382 430T405 429T422 429Q477 429 503 431H508V385H497Q441 380 422 345Q420 343 378 235T289 9T227 -131Q180 -204 113 -204Q69 -204 44 -177T19 -116Q19 -89 35 -78T69 -66Z"/>
<path stroke-width="1" id="E2-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E2-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E2-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E2-MJCAL-43" d="M201 -25Q167 -25 136 -14T75 23T29 94T12 202Q12 290 50 394T161 574Q227 642 303 673T433 704Q435 705 457 705Q533 701 533 640Q533 606 507 548T464 474Q431 444 396 444Q381 444 381 453Q381 459 388 473T407 513T428 563Q433 580 433 594Q433 636 381 636Q314 636 260 594T175 489T128 363T112 247Q112 157 153 101T273 44Q347 44 398 121Q413 144 437 157T481 171Q496 171 496 160Q496 150 476 123Q426 56 350 16T201 -25Z"/>
<path stroke-width="1" id="E2-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E2-MJMAIN-78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z"/>
<path stroke-width="1" id="E2-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E2-MJSZ2-2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"/>
<path stroke-width="1" id="E2-MJMAIN-2200" d="M0 673Q0 684 7 689T20 694Q32 694 38 680T82 567L126 451H430L473 566Q483 593 494 622T512 668T519 685Q524 694 538 694Q556 692 556 674Q556 670 426 329T293 -15Q288 -22 278 -22T263 -15Q260 -11 131 328T0 673ZM414 410Q414 411 278 411T142 410L278 55L414 410Z"/>
<path stroke-width="1" id="E2-MJMATHI-6A" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/>
<path stroke-width="1" id="E2-MJMAIN-52" d="M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z"/>
<path stroke-width="1" id="E2-MJMAIN-65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z"/>
<path stroke-width="1" id="E2-MJMAIN-4C" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q48 680 182 680Q324 680 348 683H360V637H333Q273 637 258 635T233 622L232 342V129Q232 57 237 52Q243 47 313 47Q384 47 410 53Q470 70 498 110T536 221Q536 226 537 238T540 261T542 272T562 273H582V268Q580 265 568 137T554 5V0H25V46H58Q100 47 109 49T128 61V622Z"/>
<path stroke-width="1" id="E2-MJMAIN-55" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H302Q262 636 251 634T233 622L232 418V291Q232 189 240 145T280 67Q325 24 389 24Q454 24 506 64T571 183Q575 206 575 410V598Q569 608 565 613T541 627T489 637H472V683H481Q496 680 598 680T715 683H724V637H707Q634 633 622 598L621 399Q620 194 617 180Q617 179 615 171Q595 83 531 31T389 -22Q304 -22 226 33T130 192Q129 201 128 412V622Z"/>
<path stroke-width="1" id="E2-MJMATHI-3B8" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"/>
<path stroke-width="1" id="E2-MJMAIN-54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z"/>
<path stroke-width="1" id="E2-MJMAIN-2225" d="M133 736Q138 750 153 750Q164 750 170 739Q172 735 172 250T170 -239Q164 -250 152 -250Q144 -250 138 -244L137 -243Q133 -241 133 -179T132 250Q132 731 133 736ZM329 739Q334 750 346 750Q353 750 361 744L362 743Q366 741 366 679T367 250T367 -178T362 -243L361 -244Q355 -250 347 -250Q335 -250 329 -239Q327 -235 327 250T329 739Z"/>
<path stroke-width="1" id="E2-MJMAIN-22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"/>
<path stroke-width="1" id="E2-MJSZ4-28" d="M758 -1237T758 -1240T752 -1249H736Q718 -1249 717 -1248Q711 -1245 672 -1199Q237 -706 237 251T672 1700Q697 1730 716 1749Q718 1750 735 1750H752Q758 1744 758 1741Q758 1737 740 1713T689 1644T619 1537T540 1380T463 1176Q348 802 348 251Q348 -242 441 -599T744 -1218Q758 -1237 758 -1240Z"/>
<path stroke-width="1" id="E2-MJSZ4-29" d="M33 1741Q33 1750 51 1750H60H65Q73 1750 81 1743T119 1700Q554 1207 554 251Q554 -707 119 -1199Q76 -1250 66 -1250Q65 -1250 62 -1250T56 -1249Q55 -1249 53 -1249T49 -1250Q33 -1250 33 -1239Q33 -1236 50 -1214T98 -1150T163 -1052T238 -910T311 -727Q443 -335 443 251Q443 402 436 532T405 831T339 1142T224 1438T50 1716Q33 1737 33 1741Z"/>
<path stroke-width="1" id="E2-MJMAIN-5E" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E2-MJMAIN-79" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-69" x="747" y="-340"/>
 <use xlink:href="#E2-MJMAIN-3D" x="1150" y="0"/>
<g transform="translate(1929,0)">
<g transform="translate(397,0)">
<rect stroke="none" width="2471" height="60" x="0" y="220"/>
 <use xlink:href="#E2-MJMAIN-31" x="985" y="676"/>
<g transform="translate(60,-771)">
 <use xlink:href="#E2-MJCAL-43" x="0" y="0"/>
<g transform="translate(700,0)">
 <use xlink:href="#E2-MJMAIN-28" x="0" y="0"/>
<g transform="translate(389,0)">
 <use xlink:href="#E2-MJMAIN-78" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-69" x="747" y="-213"/>
</g>
 <use xlink:href="#E2-MJMAIN-29" x="1262" y="0"/>
</g>
</g>
</g>
</g>
<g transform="translate(5085,0)">
 <use xlink:href="#E2-MJSZ2-2211" x="0" y="0"/>
<g transform="translate(379,-1110)">
 <use transform="scale(0.707)" xlink:href="#E2-MJMAIN-2200" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-6A" x="556" y="0"/>
</g>
</g>
<g transform="translate(6696,0)">
 <use xlink:href="#E2-MJMAIN-52"/>
 <use xlink:href="#E2-MJMAIN-65" x="736" y="0"/>
 <use xlink:href="#E2-MJMAIN-4C" x="1181" y="0"/>
 <use xlink:href="#E2-MJMAIN-55" x="1806" y="0"/>
</g>
<g transform="translate(9253,0)">
 <use xlink:href="#E2-MJSZ4-28"/>
<g transform="translate(792,0)">
<g transform="translate(120,0)">
<rect stroke="none" width="7468" height="60" x="0" y="220"/>
<g transform="translate(1200,814)">
 <use xlink:href="#E2-MJMATHI-3B8" x="0" y="0"/>
<g transform="translate(469,0)">
 <use xlink:href="#E2-MJMAIN-28" x="0" y="0"/>
<g transform="translate(389,0)">
 <use xlink:href="#E2-MJMAIN-78" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-69" x="747" y="-213"/>
</g>
 <use xlink:href="#E2-MJMAIN-29" x="1262" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E2-MJMAIN-54" x="2336" y="675"/>
</g>
 <use xlink:href="#E2-MJMATHI-3B8" x="2732" y="0"/>
<g transform="translate(3368,0)">
 <use xlink:href="#E2-MJMAIN-28"/>
<g transform="translate(389,0)">
 <use xlink:href="#E2-MJMAIN-78" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-6A" x="747" y="-213"/>
</g>
 <use xlink:href="#E2-MJMAIN-29" x="1309" y="0"/>
</g>
</g>
<g transform="translate(60,-771)">
 <use xlink:href="#E2-MJMAIN-2225" x="0" y="0"/>
 <use xlink:href="#E2-MJMATHI-3B8" x="500" y="0"/>
<g transform="translate(1136,0)">
 <use xlink:href="#E2-MJMAIN-28" x="0" y="0"/>
<g transform="translate(389,0)">
 <use xlink:href="#E2-MJMAIN-78" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-69" x="747" y="-213"/>
</g>
 <use xlink:href="#E2-MJMAIN-29" x="1262" y="0"/>
</g>
 <use xlink:href="#E2-MJMAIN-2225" x="2788" y="0"/>
 <use xlink:href="#E2-MJMAIN-22C5" x="3511" y="0"/>
<g transform="translate(4011,0)">
 <use xlink:href="#E2-MJMAIN-2225"/>
 <use xlink:href="#E2-MJMATHI-3B8" x="500" y="0"/>
<g transform="translate(1136,0)">
 <use xlink:href="#E2-MJMAIN-28"/>
<g transform="translate(389,0)">
 <use xlink:href="#E2-MJMAIN-78" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-6A" x="747" y="-213"/>
</g>
 <use xlink:href="#E2-MJMAIN-29" x="1309" y="0"/>
</g>
 <use xlink:href="#E2-MJMAIN-2225" x="2835" y="0"/>
</g>
</g>
</g>
</g>
 <use xlink:href="#E2-MJSZ4-29" x="8500" y="0"/>
</g>
<g transform="translate(18546,0)">
 <use xlink:href="#E2-MJMAIN-79" x="0" y="0"/>
 <use xlink:href="#E2-MJMAIN-5E" x="14" y="9"/>
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-6A" x="747" y="-340"/>
</g>
</g>
</svg></span><p>其中<span class="mjpage"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="1.302ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 560.7 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-3-Title">
<title id="MathJax-SVG-3-Title">\hat{y}</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E3-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E3-MJMAIN-5E" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E3-MJMATHI-79" x="1" y="0"/>
 <use xlink:href="#E3-MJMAIN-5E" x="60" y="21"/>
</g>
</svg></span>表示原始CAM，y表示修改后的CAM，中间部分利用余弦距离去评估像素间的特征相似度，最后输出的CAM是具有归一化相似性的原CAM的加权和。相比non-local网络，PCM去掉了残差连接等，目的在于使得那些仿射变换后的图像在弱监督训练时，仍然能够保证与原始图像拥有相同的信息。</p>
<h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><ul>
<li><p>分类损失：对于原始图像的CAM和仿射变换后的图像的CAM经过一个全局平均池化层生成向量z，在网络训练中采用多标签soft margin损失，分类损失是为C - 1个前景对象类别</p>
<span class="mjpage mjpage__block"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="100ex" height="19.343ex" style="vertical-align: -12.005ex; max-width: 60000px;" viewbox="0 -3159.4 43055.4 8328" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-4-Title">
<title id="MathJax-SVG-4-Title">
\begin{aligned}
\ell_{c l s}(\mathrm{z}, l)=-\frac{1}{C-1} \sum_{c=1}^{C-1}\left[l_{c} \log \left(\frac{1}{1+e^{-\mathrm{z}_{c}}}\right)\right.&amp; \\
\left.+\left(1-l_{c}\right) \log \left(\frac{e^{-\mathrm{z}_{c}}}{1+e^{-\mathrm{z}_{c}}}\right)\right]
\end{aligned} \\
\mathcal{L}_{c l s}=\frac{1}{2}\left(\ell_{c l s}\left(\mathrm{z}^{o}, l\right)+\ell_{c l s}\left(\mathrm{z}^{t}, l\right)\right)</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E4-MJMAIN-2113" d="M345 104T349 104T361 95T369 80T352 59Q268 -20 206 -20Q170 -20 146 3T113 53T99 104L94 129Q94 130 79 116T48 86T28 70Q22 70 15 79T7 94Q7 98 12 103T58 147L91 179V185Q91 186 91 191T92 200Q92 282 128 400T223 612T336 705Q397 705 397 636V627Q397 453 194 233Q185 223 180 218T174 211T171 208T165 201L163 186Q159 142 159 123Q159 17 208 17Q228 17 253 30T293 56T335 94Q345 104 349 104ZM360 634Q360 655 354 661T336 668Q328 668 322 666T302 645T272 592Q252 547 229 467T192 330L179 273Q179 272 186 280T204 300T221 322Q327 453 355 590Q360 612 360 634Z"/>
<path stroke-width="1" id="E4-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E4-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E4-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E4-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E4-MJMAIN-7A" d="M42 263Q44 270 48 345T53 423V431H393Q399 425 399 415Q399 403 398 402L381 378Q364 355 331 309T265 220L134 41L182 40H206Q254 40 283 46T331 77Q352 105 359 185L361 201Q361 202 381 202H401V196Q401 195 393 103T384 6V0H209L34 1L31 3Q28 8 28 17Q28 30 29 31T160 210T294 394H236Q169 393 152 388Q127 382 113 367Q89 344 82 264V255H42V263Z"/>
<path stroke-width="1" id="E4-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E4-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E4-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E4-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E4-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E4-MJMATHI-43" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/>
<path stroke-width="1" id="E4-MJSZ2-2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"/>
<path stroke-width="1" id="E4-MJMAIN-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/>
<path stroke-width="1" id="E4-MJMAIN-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"/>
<path stroke-width="1" id="E4-MJMAIN-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"/>
<path stroke-width="1" id="E4-MJMAIN-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"/>
<path stroke-width="1" id="E4-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
<path stroke-width="1" id="E4-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E4-MJSZ3-28" d="M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z"/>
<path stroke-width="1" id="E4-MJSZ3-29" d="M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z"/>
<path stroke-width="1" id="E4-MJSZ3-5B" d="M247 -949V1450H516V1388H309V-887H516V-949H247Z"/>
<path stroke-width="1" id="E4-MJMAIN-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/>
<path stroke-width="1" id="E4-MJSZ3-5D" d="M11 1388V1450H280V-949H11V-887H218V1388H11Z"/>
<path stroke-width="1" id="E4-MJCAL-4C" d="M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z"/>
<path stroke-width="1" id="E4-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E4-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E4-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E4-MJSZ1-28" d="M152 251Q152 646 388 850H416Q422 844 422 841Q422 837 403 816T357 753T302 649T255 482T236 250Q236 124 255 19T301 -147T356 -251T403 -315T422 -340Q422 -343 416 -349H388Q359 -325 332 -296T271 -213T212 -97T170 56T152 251Z"/>
<path stroke-width="1" id="E4-MJSZ1-29" d="M305 251Q305 -145 69 -349H56Q43 -349 39 -347T35 -338Q37 -333 60 -307T108 -239T160 -136T204 27T221 250T204 473T160 636T108 740T60 807T35 839Q35 850 50 850H56H69Q197 743 256 566Q305 425 305 251Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
<g transform="translate(12338,0)">
<g transform="translate(167,0)">
<g transform="translate(-11,0)">
<g transform="translate(0,1325)">
 <use xlink:href="#E4-MJMAIN-2113" x="0" y="0"/>
<g transform="translate(417,-150)">
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-63" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-6C" x="433" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-73" x="732" y="0"/>
</g>
 <use xlink:href="#E4-MJMAIN-28" x="1367" y="0"/>
 <use xlink:href="#E4-MJMAIN-7A" x="1756" y="0"/>
 <use xlink:href="#E4-MJMAIN-2C" x="2201" y="0"/>
 <use xlink:href="#E4-MJMATHI-6C" x="2646" y="0"/>
 <use xlink:href="#E4-MJMAIN-29" x="2944" y="0"/>
 <use xlink:href="#E4-MJMAIN-3D" x="3612" y="0"/>
 <use xlink:href="#E4-MJMAIN-2212" x="4668" y="0"/>
<g transform="translate(5446,0)">
<g transform="translate(120,0)">
<rect stroke="none" width="2603" height="60" x="0" y="220"/>
 <use xlink:href="#E4-MJMAIN-31" x="1051" y="676"/>
<g transform="translate(60,-726)">
 <use xlink:href="#E4-MJMATHI-43" x="0" y="0"/>
 <use xlink:href="#E4-MJMAIN-2212" x="982" y="0"/>
 <use xlink:href="#E4-MJMAIN-31" x="1983" y="0"/>
</g>
</g>
</g>
<g transform="translate(8457,0)">
 <use xlink:href="#E4-MJSZ2-2211" x="0" y="0"/>
<g transform="translate(116,-1090)">
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-63" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E4-MJMAIN-3D" x="433" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E4-MJMAIN-31" x="1212" y="0"/>
</g>
<g transform="translate(1,1151)">
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-43" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E4-MJMAIN-2212" x="760" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E4-MJMAIN-31" x="1539" y="0"/>
</g>
</g>
<g transform="translate(10068,0)">
 <use xlink:href="#E4-MJSZ3-5B"/>
<g transform="translate(528,0)">
 <use xlink:href="#E4-MJMATHI-6C" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-63" x="422" y="-213"/>
</g>
<g transform="translate(1400,0)">
 <use xlink:href="#E4-MJMAIN-6C"/>
 <use xlink:href="#E4-MJMAIN-6F" x="278" y="0"/>
 <use xlink:href="#E4-MJMAIN-67" x="779" y="0"/>
</g>
<g transform="translate(2679,0)">
 <use xlink:href="#E4-MJSZ3-28"/>
<g transform="translate(736,0)">
<g transform="translate(120,0)">
<rect stroke="none" width="3594" height="60" x="0" y="220"/>
 <use xlink:href="#E4-MJMAIN-31" x="1546" y="676"/>
<g transform="translate(60,-722)">
 <use xlink:href="#E4-MJMAIN-31" x="0" y="0"/>
 <use xlink:href="#E4-MJMAIN-2B" x="722" y="0"/>
<g transform="translate(1723,0)">
 <use xlink:href="#E4-MJMATHI-65" x="0" y="0"/>
<g transform="translate(466,288)">
 <use transform="scale(0.707)" xlink:href="#E4-MJMAIN-2212" x="0" y="0"/>
<g transform="translate(550,0)">
 <use transform="scale(0.707)" xlink:href="#E4-MJMAIN-7A" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E4-MJMATHI-63" x="547" y="-185"/>
</g>
</g>
</g>
</g>
</g>
</g>
 <use xlink:href="#E4-MJSZ3-29" x="4570" y="-1"/>
</g>
</g>
</g>
<g transform="translate(6620,-1626)">
 <use xlink:href="#E4-MJMAIN-2B" x="0" y="0"/>
<g transform="translate(945,0)">
 <use xlink:href="#E4-MJMAIN-28" x="0" y="0"/>
 <use xlink:href="#E4-MJMAIN-31" x="389" y="0"/>
 <use xlink:href="#E4-MJMAIN-2212" x="1112" y="0"/>
<g transform="translate(2112,0)">
 <use xlink:href="#E4-MJMATHI-6C" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-63" x="422" y="-213"/>
</g>
 <use xlink:href="#E4-MJMAIN-29" x="2817" y="0"/>
</g>
<g transform="translate(4319,0)">
 <use xlink:href="#E4-MJMAIN-6C"/>
 <use xlink:href="#E4-MJMAIN-6F" x="278" y="0"/>
 <use xlink:href="#E4-MJMAIN-67" x="779" y="0"/>
</g>
<g transform="translate(5598,0)">
 <use xlink:href="#E4-MJSZ3-28"/>
<g transform="translate(736,0)">
<g transform="translate(120,0)">
<rect stroke="none" width="3594" height="60" x="0" y="220"/>
<g transform="translate(921,676)">
 <use xlink:href="#E4-MJMATHI-65" x="0" y="0"/>
<g transform="translate(466,362)">
 <use transform="scale(0.707)" xlink:href="#E4-MJMAIN-2212" x="0" y="0"/>
<g transform="translate(550,0)">
 <use transform="scale(0.707)" xlink:href="#E4-MJMAIN-7A" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E4-MJMATHI-63" x="547" y="-185"/>
</g>
</g>
</g>
<g transform="translate(60,-722)">
 <use xlink:href="#E4-MJMAIN-31" x="0" y="0"/>
 <use xlink:href="#E4-MJMAIN-2B" x="722" y="0"/>
<g transform="translate(1723,0)">
 <use xlink:href="#E4-MJMATHI-65" x="0" y="0"/>
<g transform="translate(466,288)">
 <use transform="scale(0.707)" xlink:href="#E4-MJMAIN-2212" x="0" y="0"/>
<g transform="translate(550,0)">
 <use transform="scale(0.707)" xlink:href="#E4-MJMAIN-7A" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E4-MJMATHI-63" x="547" y="-185"/>
</g>
</g>
</g>
</g>
</g>
</g>
 <use xlink:href="#E4-MJSZ3-29" x="4570" y="-1"/>
</g>
 <use xlink:href="#E4-MJSZ3-5D" x="10906" y="-1"/>
</g>
</g>
</g>
</g>
<g transform="translate(14571,-4350)">
 <use xlink:href="#E4-MJCAL-4C" x="0" y="0"/>
<g transform="translate(690,-150)">
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-63" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-6C" x="433" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-73" x="732" y="0"/>
</g>
 <use xlink:href="#E4-MJMAIN-3D" x="1917" y="0"/>
<g transform="translate(2696,0)">
<g transform="translate(397,0)">
<rect stroke="none" width="620" height="60" x="0" y="220"/>
 <use xlink:href="#E4-MJMAIN-31" x="60" y="676"/>
 <use xlink:href="#E4-MJMAIN-32" x="60" y="-687"/>
</g>
</g>
<g transform="translate(3834,0)">
 <use xlink:href="#E4-MJSZ1-28"/>
<g transform="translate(458,0)">
 <use xlink:href="#E4-MJMAIN-2113" x="0" y="0"/>
<g transform="translate(417,-150)">
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-63" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-6C" x="433" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-73" x="732" y="0"/>
</g>
</g>
<g transform="translate(1992,0)">
 <use xlink:href="#E4-MJMAIN-28" x="0" y="0"/>
<g transform="translate(389,0)">
 <use xlink:href="#E4-MJMAIN-7A" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-6F" x="628" y="583"/>
</g>
 <use xlink:href="#E4-MJMAIN-2C" x="1277" y="0"/>
 <use xlink:href="#E4-MJMATHI-6C" x="1722" y="0"/>
 <use xlink:href="#E4-MJMAIN-29" x="2020" y="0"/>
</g>
 <use xlink:href="#E4-MJMAIN-2B" x="4624" y="0"/>
<g transform="translate(5625,0)">
 <use xlink:href="#E4-MJMAIN-2113" x="0" y="0"/>
<g transform="translate(417,-150)">
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-63" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-6C" x="433" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-73" x="732" y="0"/>
</g>
</g>
<g transform="translate(7159,0)">
 <use xlink:href="#E4-MJSZ1-28"/>
<g transform="translate(458,0)">
 <use xlink:href="#E4-MJMAIN-7A" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-74" x="628" y="583"/>
</g>
 <use xlink:href="#E4-MJMAIN-2C" x="1258" y="0"/>
 <use xlink:href="#E4-MJMATHI-6C" x="1703" y="0"/>
 <use xlink:href="#E4-MJSZ1-29" x="2002" y="-1"/>
</g>
 <use xlink:href="#E4-MJSZ1-29" x="9620" y="-1"/>
</g>
</g>
</g>
</svg></span></li>
<li><p>The equivariant regularization(ER) loss：</p>
<span class="mjpage mjpage__block"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="21.907ex" height="3.509ex" style="vertical-align: -1.171ex;" viewbox="0 -1006.6 9432.1 1510.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-5-Title">
<title id="MathJax-SVG-5-Title">
\mathcal{L}_{E R}=\left\|A\left(\hat{\mathrm{y}}^{o}\right)-\hat{\mathrm{y}}^{t}\right\|_{1}</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E5-MJCAL-4C" d="M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z"/>
<path stroke-width="1" id="E5-MJMATHI-45" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/>
<path stroke-width="1" id="E5-MJMATHI-52" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/>
<path stroke-width="1" id="E5-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E5-MJMAIN-2225" d="M133 736Q138 750 153 750Q164 750 170 739Q172 735 172 250T170 -239Q164 -250 152 -250Q144 -250 138 -244L137 -243Q133 -241 133 -179T132 250Q132 731 133 736ZM329 739Q334 750 346 750Q353 750 361 744L362 743Q366 741 366 679T367 250T367 -178T362 -243L361 -244Q355 -250 347 -250Q335 -250 329 -239Q327 -235 327 250T329 739Z"/>
<path stroke-width="1" id="E5-MJMATHI-41" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/>
<path stroke-width="1" id="E5-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E5-MJMAIN-79" d="M69 -66Q91 -66 104 -80T118 -116Q118 -134 109 -145T91 -160Q84 -163 97 -166Q104 -168 111 -168Q131 -168 148 -159T175 -138T197 -106T213 -75T225 -43L242 0L170 183Q150 233 125 297Q101 358 96 368T80 381Q79 382 78 382Q66 385 34 385H19V431H26L46 430Q65 430 88 429T122 428Q129 428 142 428T171 429T200 430T224 430L233 431H241V385H232Q183 385 185 366L286 112Q286 113 332 227L376 341V350Q376 365 366 373T348 383T334 385H331V431H337H344Q351 431 361 431T382 430T405 429T422 429Q477 429 503 431H508V385H497Q441 380 422 345Q420 343 378 235T289 9T227 -131Q180 -204 113 -204Q69 -204 44 -177T19 -116Q19 -89 35 -78T69 -66Z"/>
<path stroke-width="1" id="E5-MJMAIN-5E" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z"/>
<path stroke-width="1" id="E5-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E5-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E5-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E5-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E5-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E5-MJCAL-4C" x="0" y="0"/>
<g transform="translate(690,-150)">
 <use transform="scale(0.707)" xlink:href="#E5-MJMATHI-45" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E5-MJMATHI-52" x="764" y="0"/>
</g>
 <use xlink:href="#E5-MJMAIN-3D" x="2145" y="0"/>
<g transform="translate(3202,0)">
<g transform="translate(0,874)">
 <use xlink:href="#E5-MJMAIN-2225" x="0" y="-751"/>
 <use xlink:href="#E5-MJMAIN-2225" x="0" y="-999"/>
</g>
 <use xlink:href="#E5-MJMATHI-41" x="500" y="0"/>
<g transform="translate(1417,0)">
 <use xlink:href="#E5-MJMAIN-28" x="0" y="0"/>
<g transform="translate(389,0)">
 <use xlink:href="#E5-MJMAIN-79" x="0" y="0"/>
 <use xlink:href="#E5-MJMAIN-5E" x="14" y="9"/>
 <use transform="scale(0.707)" xlink:href="#E5-MJMATHI-6F" x="747" y="610"/>
</g>
 <use xlink:href="#E5-MJMAIN-29" x="1361" y="0"/>
</g>
 <use xlink:href="#E5-MJMAIN-2212" x="3390" y="0"/>
<g transform="translate(4391,0)">
 <use xlink:href="#E5-MJMAIN-79" x="0" y="0"/>
 <use xlink:href="#E5-MJMAIN-5E" x="14" y="9"/>
 <use transform="scale(0.707)" xlink:href="#E5-MJMATHI-74" x="747" y="610"/>
</g>
<g transform="translate(5275,874)">
 <use xlink:href="#E5-MJMAIN-2225" x="0" y="-751"/>
 <use xlink:href="#E5-MJMAIN-2225" x="0" y="-999"/>
</g>
 <use transform="scale(0.707)" xlink:href="#E5-MJMAIN-31" x="8168" y="-581"/>
</g>
</g>
</svg></span><p>这里A(·)是一个仿射变换，它已经被应用到siamese网络的变换分支的输入图像上。</p>
</li>
<li><p>The equivariant cross regularization (ECR) loss：此外，为了进一步提高网络的等变学习能力，将浅层原始CAMs和特征输入PCM进行细化。直观的想法是在修正的CAMs yo和yt之间引入等变正则化，但作者发现PCM的输出映射很快陷入局部最小值，图像中的所有像素都被预测为同一类，所以使用了一种等变交叉正则化损失。</p>
<span class="mjpage mjpage__block"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="40.466ex" height="3.509ex" style="vertical-align: -1.171ex;" viewbox="0 -1006.6 17422.8 1510.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-6-Title">
<title id="MathJax-SVG-6-Title">
\mathcal{L}_{E C R}=\left\|A\left(\mathrm{y}^{o}\right)-\hat{\mathrm{y}}^{t}\right\|_{1}+\left\|A\left(\hat{\mathrm{y}}^{o}\right)-\mathrm{y}^{t}\right\|_{1}</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E6-MJCAL-4C" d="M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z"/>
<path stroke-width="1" id="E6-MJMATHI-45" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/>
<path stroke-width="1" id="E6-MJMATHI-43" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/>
<path stroke-width="1" id="E6-MJMATHI-52" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/>
<path stroke-width="1" id="E6-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E6-MJMAIN-2225" d="M133 736Q138 750 153 750Q164 750 170 739Q172 735 172 250T170 -239Q164 -250 152 -250Q144 -250 138 -244L137 -243Q133 -241 133 -179T132 250Q132 731 133 736ZM329 739Q334 750 346 750Q353 750 361 744L362 743Q366 741 366 679T367 250T367 -178T362 -243L361 -244Q355 -250 347 -250Q335 -250 329 -239Q327 -235 327 250T329 739Z"/>
<path stroke-width="1" id="E6-MJMATHI-41" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/>
<path stroke-width="1" id="E6-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E6-MJMAIN-79" d="M69 -66Q91 -66 104 -80T118 -116Q118 -134 109 -145T91 -160Q84 -163 97 -166Q104 -168 111 -168Q131 -168 148 -159T175 -138T197 -106T213 -75T225 -43L242 0L170 183Q150 233 125 297Q101 358 96 368T80 381Q79 382 78 382Q66 385 34 385H19V431H26L46 430Q65 430 88 429T122 428Q129 428 142 428T171 429T200 430T224 430L233 431H241V385H232Q183 385 185 366L286 112Q286 113 332 227L376 341V350Q376 365 366 373T348 383T334 385H331V431H337H344Q351 431 361 431T382 430T405 429T422 429Q477 429 503 431H508V385H497Q441 380 422 345Q420 343 378 235T289 9T227 -131Q180 -204 113 -204Q69 -204 44 -177T19 -116Q19 -89 35 -78T69 -66Z"/>
<path stroke-width="1" id="E6-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E6-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E6-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E6-MJMAIN-5E" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z"/>
<path stroke-width="1" id="E6-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E6-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E6-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E6-MJCAL-4C" x="0" y="0"/>
<g transform="translate(690,-155)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-45" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-43" x="764" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-52" x="1525" y="0"/>
</g>
 <use xlink:href="#E6-MJMAIN-3D" x="2683" y="0"/>
<g transform="translate(3739,0)">
<g transform="translate(0,874)">
 <use xlink:href="#E6-MJMAIN-2225" x="0" y="-751"/>
 <use xlink:href="#E6-MJMAIN-2225" x="0" y="-999"/>
</g>
 <use xlink:href="#E6-MJMATHI-41" x="500" y="0"/>
<g transform="translate(1417,0)">
 <use xlink:href="#E6-MJMAIN-28" x="0" y="0"/>
<g transform="translate(389,0)">
 <use xlink:href="#E6-MJMAIN-79" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-6F" x="747" y="583"/>
</g>
 <use xlink:href="#E6-MJMAIN-29" x="1361" y="0"/>
</g>
 <use xlink:href="#E6-MJMAIN-2212" x="3390" y="0"/>
<g transform="translate(4391,0)">
 <use xlink:href="#E6-MJMAIN-79" x="0" y="0"/>
 <use xlink:href="#E6-MJMAIN-5E" x="14" y="9"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-74" x="747" y="610"/>
</g>
<g transform="translate(5275,874)">
 <use xlink:href="#E6-MJMAIN-2225" x="0" y="-751"/>
 <use xlink:href="#E6-MJMAIN-2225" x="0" y="-999"/>
</g>
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-31" x="8168" y="-581"/>
</g>
 <use xlink:href="#E6-MJMAIN-2B" x="10192" y="0"/>
<g transform="translate(11192,0)">
<g transform="translate(0,856)">
 <use xlink:href="#E6-MJMAIN-2225" x="0" y="-751"/>
 <use xlink:href="#E6-MJMAIN-2225" x="0" y="-962"/>
</g>
 <use xlink:href="#E6-MJMATHI-41" x="500" y="0"/>
<g transform="translate(1417,0)">
 <use xlink:href="#E6-MJMAIN-28" x="0" y="0"/>
<g transform="translate(389,0)">
 <use xlink:href="#E6-MJMAIN-79" x="0" y="0"/>
 <use xlink:href="#E6-MJMAIN-5E" x="14" y="9"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-6F" x="747" y="610"/>
</g>
 <use xlink:href="#E6-MJMAIN-29" x="1361" y="0"/>
</g>
 <use xlink:href="#E6-MJMAIN-2212" x="3390" y="0"/>
<g transform="translate(4391,0)">
 <use xlink:href="#E6-MJMAIN-79" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-74" x="747" y="583"/>
</g>
<g transform="translate(5275,856)">
 <use xlink:href="#E6-MJMAIN-2225" x="0" y="-751"/>
 <use xlink:href="#E6-MJMAIN-2225" x="0" y="-962"/>
</g>
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-31" x="8168" y="-554"/>
</g>
</g>
</svg></span></li>
</ul>
<h3 id="部分实验结果"><a href="#部分实验结果" class="headerlink" title="部分实验结果"></a>部分实验结果</h3><p><img src="/2020/09/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-semantic-segmentation-Self-supervised-Equivariant-Attention-Mechanism-for-Weakly-Supervised-Semantic-Segmentation/1599745601494.png" alt></p>
<p>消融实验以及基于语义分割度量的各种弱监督定位方法的评价</p>
<p><img src="/2020/09/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-semantic-segmentation-Self-supervised-Equivariant-Attention-Mechanism-for-Weakly-Supervised-Semantic-Segmentation/1599745444661.png" alt></p>
<p>可以看出本文提出的方法在图像覆盖上有一个更好的效果</p>
<p><img src="/2020/09/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-semantic-segmentation-Self-supervised-Equivariant-Attention-Mechanism-for-Weakly-Supervised-Semantic-Segmentation/1599745894539.png" alt></p>
<p>做数据增强时不同方法的网络保持等变一致性的能力</p>
<p><img src="/2020/09/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-semantic-segmentation-Self-supervised-Equivariant-Attention-Mechanism-for-Weakly-Supervised-Semantic-Segmentation/1599745839181.png" alt></p>
<p>在PASCAL VOC 2012数据集上跟其它弱监督学习方法的比较</p>
</body></html>]]></content>
      <categories>
        <category>semantic segmentation</category>
      </categories>
      <tags>
        <tag>论文阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>论文阅读-image matting-Attention-Guided Hierarchical Structure Aggregation for Image Matting</title>
    <url>/2020/09/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-image-matting-Attention-Guided-Hierarchical-Structure-Aggregation-for-Image-Matting/</url>
    <content><![CDATA[<html><head><style type="text/css">
                            .mjpage .MJX-monospace {
                            font-family: monospace
                            }

                            .mjpage .MJX-sans-serif {
                            font-family: sans-serif
                            }

                            .mjpage {
                            display: inline;
                            font-style: normal;
                            font-weight: normal;
                            line-height: normal;
                            font-size: 100%;
                            font-size-adjust: none;
                            text-indent: 0;
                            text-align: left;
                            text-transform: none;
                            letter-spacing: normal;
                            word-spacing: normal;
                            word-wrap: normal;
                            white-space: nowrap;
                            float: none;
                            direction: ltr;
                            max-width: none;
                            max-height: none;
                            min-width: 0;
                            min-height: 0;
                            border: 0;
                            padding: 0;
                            margin: 0
                            }

                            .mjpage * {
                            transition: none;
                            -webkit-transition: none;
                            -moz-transition: none;
                            -ms-transition: none;
                            -o-transition: none
                            }

                            .mjx-svg-href {
                            fill: blue;
                            stroke: blue
                            }

                            .MathJax_SVG_LineBox {
                            display: table!important
                            }

                            .MathJax_SVG_LineBox span {
                            display: table-cell!important;
                            width: 10000em!important;
                            min-width: 0;
                            max-width: none;
                            padding: 0;
                            border: 0;
                            margin: 0
                            }

                            .mjpage__block {
                            text-align: center;
                            margin: 1em 0em;
                            position: relative;
                            display: block!important;
                            text-indent: 0;
                            max-width: none;
                            max-height: none;
                            min-width: 0;
                            min-height: 0;
                            width: 100%
                            }</style></head><body><p><img src="/2020/09/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-image-matting-Attention-Guided-Hierarchical-Structure-Aggregation-for-Image-Matting/1599715745034.png" alt></p>
<h3 id="图像抠图介绍"><a href="#图像抠图介绍" class="headerlink" title="图像抠图介绍"></a>图像抠图介绍</h3><p>通常而言，对于一张图像，需要求解出它的前景，背景及alpha matte，基于alpha通道则可以将前景与任意背景进行组合得到新的图像，因此alpha matte是一个与原图同大小的一个单通道图像，每个像素对应于原RGB图像相同位置像素的alpha值。</p>
<span class="mjpage mjpage__block"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="37.742ex" height="2.843ex" style="vertical-align: -0.838ex;" viewbox="0 -863.1 16250.2 1223.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">
I_{z}=\alpha_{z} F_{z}+\left(1-\alpha_{z}\right) B_{z}, \quad \alpha_{z} \in[0,1]</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-49" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/>
<path stroke-width="1" id="E1-MJMATHI-7A" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"/>
<path stroke-width="1" id="E1-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E1-MJMATHI-3B1" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"/>
<path stroke-width="1" id="E1-MJMATHI-46" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"/>
<path stroke-width="1" id="E1-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E1-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E1-MJMATHI-42" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"/>
<path stroke-width="1" id="E1-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E1-MJMAIN-2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/>
<path stroke-width="1" id="E1-MJMAIN-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/>
<path stroke-width="1" id="E1-MJMAIN-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-49" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-7A" x="622" y="-213"/>
 <use xlink:href="#E1-MJMAIN-3D" x="1149" y="0"/>
<g transform="translate(2205,0)">
 <use xlink:href="#E1-MJMATHI-3B1" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-7A" x="905" y="-213"/>
</g>
<g transform="translate(3277,0)">
 <use xlink:href="#E1-MJMATHI-46" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-7A" x="910" y="-213"/>
</g>
 <use xlink:href="#E1-MJMAIN-2B" x="4574" y="0"/>
<g transform="translate(5575,0)">
 <use xlink:href="#E1-MJMAIN-28" x="0" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="389" y="0"/>
 <use xlink:href="#E1-MJMAIN-2212" x="1112" y="0"/>
<g transform="translate(2112,0)">
 <use xlink:href="#E1-MJMATHI-3B1" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-7A" x="905" y="-213"/>
</g>
 <use xlink:href="#E1-MJMAIN-29" x="3184" y="0"/>
</g>
<g transform="translate(9316,0)">
 <use xlink:href="#E1-MJMATHI-42" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-7A" x="1074" y="-213"/>
</g>
 <use xlink:href="#E1-MJMAIN-2C" x="10507" y="0"/>
<g transform="translate(11952,0)">
 <use xlink:href="#E1-MJMATHI-3B1" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-7A" x="905" y="-213"/>
</g>
 <use xlink:href="#E1-MJMAIN-2208" x="13301" y="0"/>
 <use xlink:href="#E1-MJMAIN-5B" x="14247" y="0"/>
 <use xlink:href="#E1-MJMAIN-30" x="14525" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="15026" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="15471" y="0"/>
 <use xlink:href="#E1-MJMAIN-5D" x="15971" y="0"/>
</g>
</svg></span><p>上式z为输入图像的像素位置，<span class="mjpage"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="2.489ex" height="2.009ex" style="vertical-align: -0.671ex;" viewbox="0 -576.1 1071.8 865.1" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-2-Title">
<title id="MathJax-SVG-2-Title">\alpha_z</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E2-MJMATHI-3B1" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"/>
<path stroke-width="1" id="E2-MJMATHI-7A" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E2-MJMATHI-3B1" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-7A" x="905" y="-213"/>
</g>
</svg></span>，<span class="mjpage"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="2.496ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 1074.8 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-3-Title">
<title id="MathJax-SVG-3-Title">F_z</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E3-MJMATHI-46" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"/>
<path stroke-width="1" id="E3-MJMATHI-7A" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E3-MJMATHI-46" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E3-MJMATHI-7A" x="910" y="-213"/>
</g>
</svg></span>和<span class="mjpage"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="2.766ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 1190.8 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-4-Title">
<title id="MathJax-SVG-4-Title">B_z</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E4-MJMATHI-42" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"/>
<path stroke-width="1" id="E4-MJMATHI-7A" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E4-MJMATHI-42" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-7A" x="1074" y="-213"/>
</g>
</svg></span>分别为像素z处的alpha估计，前景和背景。</p>
<p>为了降低求解难度，通过使用人工标记的三元图来提供更多约束，即将一副图像分成绝对前景(FG,对应于下图的白色)、绝对背景(BG,对应于下图的黑色)以及过渡区域(对应于下图的灰色)，这样只需要求解过渡区域的像素对应的alpha值。即本质上是逐像素的前景区域的回归，认为FG的结构来源于两个方面：自适应的语义和细化边界，对应于上式中的<span class="mjpage"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="6.75ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 2906.3 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-5-Title">
<title id="MathJax-SVG-5-Title">\alpha_z = 1</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E5-MJMATHI-3B1" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"/>
<path stroke-width="1" id="E5-MJMATHI-7A" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"/>
<path stroke-width="1" id="E5-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E5-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E5-MJMATHI-3B1" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E5-MJMATHI-7A" x="905" y="-213"/>
 <use xlink:href="#E5-MJMAIN-3D" x="1349" y="0"/>
 <use xlink:href="#E5-MJMAIN-31" x="2405" y="0"/>
</g>
</svg></span>和视图<span class="mjpage"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="10.498ex" height="2.843ex" style="vertical-align: -0.838ex;" viewbox="0 -863.1 4520 1223.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-6-Title">
<title id="MathJax-SVG-6-Title">\alpha_z∈(0,1)</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E6-MJMATHI-3B1" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"/>
<path stroke-width="1" id="E6-MJMATHI-7A" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"/>
<path stroke-width="1" id="E6-MJMAIN-2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/>
<path stroke-width="1" id="E6-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E6-MJMAIN-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/>
<path stroke-width="1" id="E6-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E6-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E6-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E6-MJMATHI-3B1" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-7A" x="905" y="-213"/>
 <use xlink:href="#E6-MJMAIN-2208" x="1349" y="0"/>
 <use xlink:href="#E6-MJMAIN-28" x="2294" y="0"/>
 <use xlink:href="#E6-MJMAIN-30" x="2684" y="0"/>
 <use xlink:href="#E6-MJMAIN-2C" x="3184" y="0"/>
 <use xlink:href="#E6-MJMAIN-31" x="3630" y="0"/>
 <use xlink:href="#E6-MJMAIN-29" x="4130" y="0"/>
</g>
</svg></span>。</p>
<p><img src="https://www.52cv.net/wp-content/uploads/2020/06/微信图片_20200628101306-1024x549.jpg" alt="该图来自 ：http://wangchuan.github.io/archive/projects/robust-matting/"></p>
<h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><ul>
<li>现有的基于深度学习的抠图算法主要依靠高级语义特征(提供FG的种类等)和外观特征(纹理和边界细节)来改进alpha mattes的整体结构。</li>
<li>一方面，自然图像抠图是一个本质上的回归问题，不完全依赖于图像语义，这意味着深度网络提取的语义属性对图像结构的贡献是不相等的。另一方面，外观线索在保留复杂图像纹理的同时，也包含了FG之外的细节。然而，现有的抠图网络忽视了对这种层次特征的深层次挖掘和提炼。</li>
<li>所以，本文认为从cnn中提取的高级语义对alpha感知的贡献是不平等的，应该调和高级语义信息和低级外观线索，需要在组合前进行适当的过滤，以细化前景细节。</li>
</ul>
<h3 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h3><ul>
<li>提出了一种端到端的分层注意力抠图网络(HAttMatting)，该网络可以在不增加任何输入的情况下实现高质量的注意力抠图；</li>
<li>设计了一个分层注意机制，它可以聚合外观线索和高级金字塔特征，以产生细粒度的边界和自适应的语义；</li>
<li>采用了均方误差(MSE)、结构相似性(SSIM)和对抗损失等组成的混合损失来提高alpha感知，为文中的HAttMatting训练提供有效的指导。</li>
</ul>
<a id="more"></a>
<h3 id="以前的方法"><a href="#以前的方法" class="headerlink" title="以前的方法"></a>以前的方法</h3><ul>
<li>大多方法为高级语义特征的提取设计复杂的网络，并融合来自输入图像或低层CNN特征的外观提示，然而它们的外观提示和高级语义都依赖于作为辅助和输入的三元图。</li>
<li>另一些方法则依靠分割来生成trimap，这在一定程度上降低了alpha mattes的精度。后期融合将分割网络的FG和BG权重图与初始CNN特征混合，以单个RGB图像作为输入，预测alpha mattes。然而，当语义分割遇到困难时，后期融合就会出现问题。</li>
</ul>
<h3 id="本文方法"><a href="#本文方法" class="headerlink" title="本文方法"></a>本文方法</h3><p><strong>思想</strong></p>
<p>完整的对象FG应该由两部分组成：表示FG类别和配置文件的主体，位于过渡区域的纹理和边界细节；前者可以通过高级语义提出，而后者通常来自输入图像或低层次CNN特征，称为外观线索，两者结合可以得到alpha mattes。</p>
<p>本文认为高级语义特征和外观线索在结合前需要通过注意力机制等进行适当的处理。首先，自然图像抠图应该处理不同类型的FG对象，这意味着我们应该提取高级语义来处理FG信息，并适当地抑制它们，以降低它们对对象类的敏感性。其次，外观线索涉及到不必要的BG细节，需要在alpha mattes中去除。</p>
<p>基于以上分析，本文方法的核心思想是选择与抠图相适应的语义信息，并去除外观线索中多余的BG纹理，然后将它们聚合起来预测alpha mattes。</p>
<p><img src="/2020/09/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-image-matting-Attention-Guided-Hierarchical-Structure-Aggregation-for-Image-Matting/1599720750885.png" alt></p>
<p><strong>网络结构</strong></p>
<p>输入的图像经过ResNeXt提取特征，将高层特征输入到ASPP模块，以获取多尺度语义特征，再基于通道注意力机制进行过滤，同时将低层特征作为外观线索，并基于空间注意力机制，同时去除FG外的图像纹理细节。此外，参照PatchGAN的鉴别器网络来提高alpha mattes的视觉质量。</p>
<p><strong>Pyramidal features distillation</strong></p>
<ul>
<li><p>原因</p>
<p>ASSP提取的金字塔特征对FG结构回归的贡献不相等，因此对金字塔特征进行通道注意力，以提取自适应的语义属性。</p>
</li>
<li><p>步骤</p>
<p>对ASSP提得到的语义金字塔特征进行上采样，再利用pooling来泛化特征图，然后使用权值共享的MLP提取语义属性，最后使用一个sigmoid来计算通道方向上的注意力图，并将其与上采样的金字塔特征相乘来实现语义精馏。</p>
</li>
<li><p>优点</p>
<p>通道注意力机制可以选择适合于图像抠图的金字塔特征，并保留图像轮廓及类别属性等。</p>
</li>
</ul>
<p><strong>Appearance cues ﬁltration</strong></p>
<ul>
<li><p>原因</p>
<p>图像抠图要求精确的FG边界，而高层的金字塔特征无法提供这样的纹理细节，因此需要用于生成alpha matte的外观线索，同时希望过滤BG内的外观线索。</p>
</li>
<li><p>步骤</p>
<p>低层特征作为外观线索输入该模块，同时利用过滤后的语义特征辅助进行空间注意力机制，过滤属于BG的外观线索，最后将过滤后的外观线索与过滤后的语义特征结合起来生成alpha matte。</p>
</li>
<li><p>优点</p>
<p>空间注意力机制可以过滤外观线索，这种分层注意力机制可以有效地关注低层的外观线索和高层的语义特征，它们的聚合可以产生细粒度的alpha mattes。</p>
</li>
</ul>
<h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>本文结合均方误差(MSE)、结构相似度(SSIM)和对抗损失设计了一种混合损失来指导网络训练，分别负责像素级精度、结构一致性和视觉质量。</p>
<ul>
<li><p>总的损失：</p>
<span class="mjpage mjpage__block"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="37.977ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 16351.3 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-7-Title">
<title id="MathJax-SVG-7-Title">
\mathcal{L}_{\text {total}}=\lambda_{1} \mathcal{L}_{a d v}+\lambda_{2} \mathcal{L}_{M S E}+\lambda_{3} \mathcal{L}_{S S I M}</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E7-MJCAL-4C" d="M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z"/>
<path stroke-width="1" id="E7-MJMAIN-74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z"/>
<path stroke-width="1" id="E7-MJMAIN-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"/>
<path stroke-width="1" id="E7-MJMAIN-61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z"/>
<path stroke-width="1" id="E7-MJMAIN-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"/>
<path stroke-width="1" id="E7-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E7-MJMATHI-3BB" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"/>
<path stroke-width="1" id="E7-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E7-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E7-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E7-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E7-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
<path stroke-width="1" id="E7-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E7-MJMATHI-4D" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/>
<path stroke-width="1" id="E7-MJMATHI-53" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/>
<path stroke-width="1" id="E7-MJMATHI-45" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/>
<path stroke-width="1" id="E7-MJMAIN-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/>
<path stroke-width="1" id="E7-MJMATHI-49" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E7-MJCAL-4C" x="0" y="0"/>
<g transform="translate(690,-150)">
 <use transform="scale(0.707)" xlink:href="#E7-MJMAIN-74"/>
 <use transform="scale(0.707)" xlink:href="#E7-MJMAIN-6F" x="389" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E7-MJMAIN-74" x="890" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E7-MJMAIN-61" x="1279" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E7-MJMAIN-6C" x="1780" y="0"/>
</g>
 <use xlink:href="#E7-MJMAIN-3D" x="2523" y="0"/>
<g transform="translate(3580,0)">
 <use xlink:href="#E7-MJMATHI-3BB" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E7-MJMAIN-31" x="825" y="-213"/>
</g>
<g transform="translate(4617,0)">
 <use xlink:href="#E7-MJCAL-4C" x="0" y="0"/>
<g transform="translate(690,-150)">
 <use transform="scale(0.707)" xlink:href="#E7-MJMATHI-61" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E7-MJMATHI-64" x="529" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E7-MJMATHI-76" x="1053" y="0"/>
</g>
</g>
 <use xlink:href="#E7-MJMAIN-2B" x="6718" y="0"/>
<g transform="translate(7718,0)">
 <use xlink:href="#E7-MJMATHI-3BB" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E7-MJMAIN-32" x="825" y="-213"/>
</g>
<g transform="translate(8756,0)">
 <use xlink:href="#E7-MJCAL-4C" x="0" y="0"/>
<g transform="translate(690,-155)">
 <use transform="scale(0.707)" xlink:href="#E7-MJMATHI-4D" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E7-MJMATHI-53" x="1051" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E7-MJMATHI-45" x="1697" y="0"/>
</g>
</g>
 <use xlink:href="#E7-MJMAIN-2B" x="11509" y="0"/>
<g transform="translate(12510,0)">
 <use xlink:href="#E7-MJMATHI-3BB" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E7-MJMAIN-33" x="825" y="-213"/>
</g>
<g transform="translate(13547,0)">
 <use xlink:href="#E7-MJCAL-4C" x="0" y="0"/>
<g transform="translate(690,-155)">
 <use transform="scale(0.707)" xlink:href="#E7-MJMATHI-53" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E7-MJMATHI-53" x="645" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E7-MJMATHI-49" x="1291" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E7-MJMATHI-4D" x="1795" y="0"/>
</g>
</g>
</g>
</svg></span></li>
<li><p>对抗损失：</p>
<span class="mjpage mjpage__block"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="49.335ex" height="3.176ex" style="vertical-align: -1.171ex;" viewbox="0 -863.1 21241.3 1367.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-8-Title">
<title id="MathJax-SVG-8-Title">
\mathcal{L}_{a d v}=E_{(I, A)}[\log (D(I, A))+\log (1-D(I, G(I)))]</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E8-MJCAL-4C" d="M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z"/>
<path stroke-width="1" id="E8-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E8-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E8-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E8-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E8-MJMATHI-45" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/>
<path stroke-width="1" id="E8-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E8-MJMATHI-49" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/>
<path stroke-width="1" id="E8-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E8-MJMATHI-41" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/>
<path stroke-width="1" id="E8-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E8-MJMAIN-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/>
<path stroke-width="1" id="E8-MJMAIN-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"/>
<path stroke-width="1" id="E8-MJMAIN-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"/>
<path stroke-width="1" id="E8-MJMAIN-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"/>
<path stroke-width="1" id="E8-MJMATHI-44" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/>
<path stroke-width="1" id="E8-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
<path stroke-width="1" id="E8-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E8-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E8-MJMATHI-47" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"/>
<path stroke-width="1" id="E8-MJMAIN-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E8-MJCAL-4C" x="0" y="0"/>
<g transform="translate(690,-150)">
 <use transform="scale(0.707)" xlink:href="#E8-MJMATHI-61" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E8-MJMATHI-64" x="529" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E8-MJMATHI-76" x="1053" y="0"/>
</g>
 <use xlink:href="#E8-MJMAIN-3D" x="2156" y="0"/>
<g transform="translate(3212,0)">
 <use xlink:href="#E8-MJMATHI-45" x="0" y="0"/>
<g transform="translate(738,-187)">
 <use transform="scale(0.707)" xlink:href="#E8-MJMAIN-28" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E8-MJMATHI-49" x="389" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E8-MJMAIN-2C" x="894" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E8-MJMATHI-41" x="1172" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E8-MJMAIN-29" x="1923" y="0"/>
</g>
</g>
 <use xlink:href="#E8-MJMAIN-5B" x="5686" y="0"/>
<g transform="translate(5964,0)">
 <use xlink:href="#E8-MJMAIN-6C"/>
 <use xlink:href="#E8-MJMAIN-6F" x="278" y="0"/>
 <use xlink:href="#E8-MJMAIN-67" x="779" y="0"/>
</g>
 <use xlink:href="#E8-MJMAIN-28" x="7244" y="0"/>
 <use xlink:href="#E8-MJMATHI-44" x="7633" y="0"/>
 <use xlink:href="#E8-MJMAIN-28" x="8462" y="0"/>
 <use xlink:href="#E8-MJMATHI-49" x="8851" y="0"/>
 <use xlink:href="#E8-MJMAIN-2C" x="9356" y="0"/>
 <use xlink:href="#E8-MJMATHI-41" x="9801" y="0"/>
 <use xlink:href="#E8-MJMAIN-29" x="10551" y="0"/>
 <use xlink:href="#E8-MJMAIN-29" x="10941" y="0"/>
 <use xlink:href="#E8-MJMAIN-2B" x="11553" y="0"/>
<g transform="translate(12553,0)">
 <use xlink:href="#E8-MJMAIN-6C"/>
 <use xlink:href="#E8-MJMAIN-6F" x="278" y="0"/>
 <use xlink:href="#E8-MJMAIN-67" x="779" y="0"/>
</g>
 <use xlink:href="#E8-MJMAIN-28" x="13833" y="0"/>
 <use xlink:href="#E8-MJMAIN-31" x="14222" y="0"/>
 <use xlink:href="#E8-MJMAIN-2212" x="14945" y="0"/>
 <use xlink:href="#E8-MJMATHI-44" x="15946" y="0"/>
 <use xlink:href="#E8-MJMAIN-28" x="16774" y="0"/>
 <use xlink:href="#E8-MJMATHI-49" x="17164" y="0"/>
 <use xlink:href="#E8-MJMAIN-2C" x="17668" y="0"/>
 <use xlink:href="#E8-MJMATHI-47" x="18113" y="0"/>
 <use xlink:href="#E8-MJMAIN-28" x="18900" y="0"/>
 <use xlink:href="#E8-MJMATHI-49" x="19289" y="0"/>
 <use xlink:href="#E8-MJMAIN-29" x="19794" y="0"/>
 <use xlink:href="#E8-MJMAIN-29" x="20183" y="0"/>
 <use xlink:href="#E8-MJMAIN-29" x="20573" y="0"/>
 <use xlink:href="#E8-MJMAIN-5D" x="20962" y="0"/>
</g>
</svg></span></li>
<li><p>像素损失：</p>
<span class="mjpage mjpage__block"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="44.934ex" height="7.343ex" style="vertical-align: -3.005ex;" viewbox="0 -1867.7 19346.4 3161.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-9-Title">
<title id="MathJax-SVG-9-Title">
\mathcal{L}_{M S E}=\frac{1}{|\Omega|} \sum_{i}^{\Omega}\left(\alpha_{p}^{i}-\alpha_{g}^{i}\right)^{2}, \quad \alpha_{p}^{i}, \alpha_{g}^{i} \in[0,1]</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E9-MJCAL-4C" d="M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z"/>
<path stroke-width="1" id="E9-MJMATHI-4D" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/>
<path stroke-width="1" id="E9-MJMATHI-53" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/>
<path stroke-width="1" id="E9-MJMATHI-45" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/>
<path stroke-width="1" id="E9-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E9-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E9-MJMAIN-7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/>
<path stroke-width="1" id="E9-MJMAIN-3A9" d="M55 454Q55 503 75 546T127 617T197 665T272 695T337 704H352Q396 704 404 703Q527 687 596 615T666 454Q666 392 635 330T559 200T499 83V80H543Q589 81 600 83T617 93Q622 102 629 135T636 172L637 177H677V175L660 89Q645 3 644 2V0H552H488Q461 0 456 3T451 20Q451 89 499 235T548 455Q548 512 530 555T483 622T424 656T361 668Q332 668 303 658T243 626T193 560T174 456Q174 380 222 233T270 20Q270 7 263 0H77V2Q76 3 61 89L44 175V177H84L85 172Q85 171 88 155T96 119T104 93Q109 86 120 84T178 80H222V83Q206 132 162 199T87 329T55 454Z"/>
<path stroke-width="1" id="E9-MJSZ2-2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"/>
<path stroke-width="1" id="E9-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E9-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E9-MJMATHI-3B1" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"/>
<path stroke-width="1" id="E9-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/>
<path stroke-width="1" id="E9-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E9-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
<path stroke-width="1" id="E9-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E9-MJSZ1-28" d="M152 251Q152 646 388 850H416Q422 844 422 841Q422 837 403 816T357 753T302 649T255 482T236 250Q236 124 255 19T301 -147T356 -251T403 -315T422 -340Q422 -343 416 -349H388Q359 -325 332 -296T271 -213T212 -97T170 56T152 251Z"/>
<path stroke-width="1" id="E9-MJSZ1-29" d="M305 251Q305 -145 69 -349H56Q43 -349 39 -347T35 -338Q37 -333 60 -307T108 -239T160 -136T204 27T221 250T204 473T160 636T108 740T60 807T35 839Q35 850 50 850H56H69Q197 743 256 566Q305 425 305 251Z"/>
<path stroke-width="1" id="E9-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E9-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E9-MJMAIN-2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/>
<path stroke-width="1" id="E9-MJMAIN-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/>
<path stroke-width="1" id="E9-MJMAIN-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/>
<path stroke-width="1" id="E9-MJMAIN-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E9-MJCAL-4C" x="0" y="0"/>
<g transform="translate(690,-155)">
 <use transform="scale(0.707)" xlink:href="#E9-MJMATHI-4D" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E9-MJMATHI-53" x="1051" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E9-MJMATHI-45" x="1697" y="0"/>
</g>
 <use xlink:href="#E9-MJMAIN-3D" x="2808" y="0"/>
<g transform="translate(3587,0)">
<g transform="translate(397,0)">
<rect stroke="none" width="1399" height="60" x="0" y="220"/>
 <use xlink:href="#E9-MJMAIN-31" x="449" y="676"/>
<g transform="translate(60,-771)">
 <use xlink:href="#E9-MJMAIN-7C" x="0" y="0"/>
 <use xlink:href="#E9-MJMAIN-3A9" x="278" y="0"/>
 <use xlink:href="#E9-MJMAIN-7C" x="1001" y="0"/>
</g>
</g>
</g>
<g transform="translate(5671,0)">
 <use xlink:href="#E9-MJSZ2-2211" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E9-MJMATHI-69" x="848" y="-1536"/>
 <use transform="scale(0.707)" xlink:href="#E9-MJMAIN-3A9" x="660" y="1627"/>
</g>
<g transform="translate(7282,0)">
 <use xlink:href="#E9-MJSZ1-28"/>
<g transform="translate(458,0)">
 <use xlink:href="#E9-MJMATHI-3B1" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E9-MJMATHI-69" x="905" y="499"/>
 <use transform="scale(0.707)" xlink:href="#E9-MJMATHI-70" x="905" y="-212"/>
</g>
 <use xlink:href="#E9-MJMAIN-2212" x="1777" y="0"/>
<g transform="translate(2777,0)">
 <use xlink:href="#E9-MJMATHI-3B1" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E9-MJMATHI-69" x="905" y="499"/>
 <use transform="scale(0.707)" xlink:href="#E9-MJMATHI-67" x="905" y="-211"/>
</g>
 <use xlink:href="#E9-MJSZ1-29" x="3858" y="-1"/>
 <use transform="scale(0.707)" xlink:href="#E9-MJMAIN-32" x="6104" y="816"/>
</g>
 <use xlink:href="#E9-MJMAIN-2C" x="12053" y="0"/>
<g transform="translate(13498,0)">
 <use xlink:href="#E9-MJMATHI-3B1" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E9-MJMATHI-69" x="905" y="499"/>
 <use transform="scale(0.707)" xlink:href="#E9-MJMATHI-70" x="905" y="-212"/>
</g>
 <use xlink:href="#E9-MJMAIN-2C" x="14594" y="0"/>
<g transform="translate(15039,0)">
 <use xlink:href="#E9-MJMATHI-3B1" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E9-MJMATHI-69" x="905" y="499"/>
 <use transform="scale(0.707)" xlink:href="#E9-MJMATHI-67" x="905" y="-211"/>
</g>
 <use xlink:href="#E9-MJMAIN-2208" x="16397" y="0"/>
 <use xlink:href="#E9-MJMAIN-5B" x="17343" y="0"/>
 <use xlink:href="#E9-MJMAIN-30" x="17621" y="0"/>
 <use xlink:href="#E9-MJMAIN-2C" x="18122" y="0"/>
 <use xlink:href="#E9-MJMAIN-31" x="18567" y="0"/>
 <use xlink:href="#E9-MJMAIN-5D" x="19067" y="0"/>
</g>
</svg></span></li>
<li><p>结构化损失：</p>
<span class="mjpage mjpage__block"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="44.268ex" height="7.009ex" style="vertical-align: -3.171ex;" viewbox="0 -1652.5 19059.6 3017.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-10-Title">
<title id="MathJax-SVG-10-Title">
\mathcal{L}_{S S I M}=1-\frac{\left(2 \mu_{p} \mu_{g}+c_{1}\right)\left(2 \sigma_{p g}+c_{2}\right)}{\left(\mu_{p}^{2}+\mu_{g}^{2}+c_{1}\right)\left(\sigma_{p}^{2}+\sigma_{g}^{2}+c_{2}\right)}</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E10-MJCAL-4C" d="M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z"/>
<path stroke-width="1" id="E10-MJMATHI-53" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/>
<path stroke-width="1" id="E10-MJMATHI-49" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/>
<path stroke-width="1" id="E10-MJMATHI-4D" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/>
<path stroke-width="1" id="E10-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E10-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E10-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E10-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E10-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E10-MJMATHI-3BC" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"/>
<path stroke-width="1" id="E10-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/>
<path stroke-width="1" id="E10-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
<path stroke-width="1" id="E10-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
<path stroke-width="1" id="E10-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E10-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E10-MJMATHI-3C3" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"/>
<path stroke-width="1" id="E10-MJSZ1-28" d="M152 251Q152 646 388 850H416Q422 844 422 841Q422 837 403 816T357 753T302 649T255 482T236 250Q236 124 255 19T301 -147T356 -251T403 -315T422 -340Q422 -343 416 -349H388Q359 -325 332 -296T271 -213T212 -97T170 56T152 251Z"/>
<path stroke-width="1" id="E10-MJSZ1-29" d="M305 251Q305 -145 69 -349H56Q43 -349 39 -347T35 -338Q37 -333 60 -307T108 -239T160 -136T204 27T221 250T204 473T160 636T108 740T60 807T35 839Q35 850 50 850H56H69Q197 743 256 566Q305 425 305 251Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E10-MJCAL-4C" x="0" y="0"/>
<g transform="translate(690,-155)">
 <use transform="scale(0.707)" xlink:href="#E10-MJMATHI-53" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E10-MJMATHI-53" x="645" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E10-MJMATHI-49" x="1291" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E10-MJMATHI-4D" x="1795" y="0"/>
</g>
 <use xlink:href="#E10-MJMAIN-3D" x="3081" y="0"/>
 <use xlink:href="#E10-MJMAIN-31" x="4137" y="0"/>
 <use xlink:href="#E10-MJMAIN-2212" x="4860" y="0"/>
<g transform="translate(5638,0)">
<g transform="translate(342,0)">
<rect stroke="none" width="12958" height="60" x="0" y="220"/>
<g transform="translate(1271,815)">
 <use xlink:href="#E10-MJMAIN-28"/>
 <use xlink:href="#E10-MJMAIN-32" x="389" y="0"/>
<g transform="translate(890,0)">
 <use xlink:href="#E10-MJMATHI-3BC" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E10-MJMATHI-70" x="853" y="-213"/>
</g>
<g transform="translate(1949,0)">
 <use xlink:href="#E10-MJMATHI-3BC" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E10-MJMATHI-67" x="853" y="-213"/>
</g>
 <use xlink:href="#E10-MJMAIN-2B" x="3215" y="0"/>
<g transform="translate(4215,0)">
 <use xlink:href="#E10-MJMATHI-63" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E10-MJMAIN-31" x="613" y="-213"/>
</g>
 <use xlink:href="#E10-MJMAIN-29" x="5103" y="0"/>
<g transform="translate(5659,0)">
 <use xlink:href="#E10-MJMAIN-28"/>
 <use xlink:href="#E10-MJMAIN-32" x="389" y="0"/>
<g transform="translate(890,0)">
 <use xlink:href="#E10-MJMATHI-3C3" x="0" y="0"/>
<g transform="translate(571,-150)">
 <use transform="scale(0.707)" xlink:href="#E10-MJMATHI-70" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E10-MJMATHI-67" x="503" y="0"/>
</g>
</g>
 <use xlink:href="#E10-MJMAIN-2B" x="2479" y="0"/>
<g transform="translate(3480,0)">
 <use xlink:href="#E10-MJMATHI-63" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E10-MJMAIN-32" x="613" y="-213"/>
</g>
 <use xlink:href="#E10-MJMAIN-29" x="4367" y="0"/>
</g>
</g>
<g transform="translate(60,-870)">
 <use xlink:href="#E10-MJSZ1-28"/>
<g transform="translate(458,0)">
 <use xlink:href="#E10-MJMATHI-3BC" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E10-MJMAIN-32" x="853" y="488"/>
 <use transform="scale(0.707)" xlink:href="#E10-MJMATHI-70" x="853" y="-212"/>
</g>
 <use xlink:href="#E10-MJMAIN-2B" x="1740" y="0"/>
<g transform="translate(2740,0)">
 <use xlink:href="#E10-MJMATHI-3BC" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E10-MJMAIN-32" x="853" y="488"/>
 <use transform="scale(0.707)" xlink:href="#E10-MJMATHI-67" x="853" y="-211"/>
</g>
 <use xlink:href="#E10-MJMAIN-2B" x="4020" y="0"/>
<g transform="translate(5021,0)">
 <use xlink:href="#E10-MJMATHI-63" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E10-MJMAIN-31" x="613" y="-213"/>
</g>
 <use xlink:href="#E10-MJSZ1-29" x="5908" y="-1"/>
<g transform="translate(6533,0)">
 <use xlink:href="#E10-MJSZ1-28"/>
<g transform="translate(458,0)">
 <use xlink:href="#E10-MJMATHI-3C3" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E10-MJMAIN-32" x="810" y="488"/>
 <use transform="scale(0.707)" xlink:href="#E10-MJMATHI-70" x="808" y="-212"/>
</g>
 <use xlink:href="#E10-MJMAIN-2B" x="1708" y="0"/>
<g transform="translate(2708,0)">
 <use xlink:href="#E10-MJMATHI-3C3" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E10-MJMAIN-32" x="810" y="488"/>
 <use transform="scale(0.707)" xlink:href="#E10-MJMATHI-67" x="808" y="-211"/>
</g>
 <use xlink:href="#E10-MJMAIN-2B" x="3957" y="0"/>
<g transform="translate(4958,0)">
 <use xlink:href="#E10-MJMATHI-63" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E10-MJMAIN-32" x="613" y="-213"/>
</g>
 <use xlink:href="#E10-MJSZ1-29" x="5846" y="-1"/>
</g>
</g>
</g>
</g>
</g>
</svg></span></li>
</ul>
<h3 id="部分实验结果"><a href="#部分实验结果" class="headerlink" title="部分实验结果"></a>部分实验结果</h3><ul>
<li><p>Datasets： </p>
<p>Adobe Composition-1k：训练集由FG对象和相应的ground truth alpha mattes组成，将每个FG对象和MS COCO的BG对象合成得到输入图像，测试集则通过FG对象和PASCAL VOC2012的BG数据集合成</p>
<p>Distinctions-646：自行构建的数据集</p>
</li>
<li><p>Evaluation metrics：</p>
<p>绝对差之和(SAD)，均方误差(MSE)，梯度(Grad)和连通性(Conn)，均越小越好</p>
</li>
</ul>
<p><img src="/2020/09/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-image-matting-Attention-Guided-Hierarchical-Structure-Aggregation-for-Image-Matting/1599726697888.png" alt></p>
<p><img src="/2020/09/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-image-matting-Attention-Guided-Hierarchical-Structure-Aggregation-for-Image-Matting/1599726716569.png" alt></p>
<p>Late Fusion和HAttMatting只以RGB图像作为输入，其他方法需要trimap辅助来保证alpha mattes的准确性。CA表示通道注意力，SA表示空间注意力，Low表示低层特征，SSIM表示结构相似性损失。</p>
</body></html>]]></content>
      <categories>
        <category>image matting</category>
      </categories>
      <tags>
        <tag>论文阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>论文阅读-super-resolution-Unpaired Image Super-Resolution using Pseudo-Supervision</title>
    <url>/2020/09/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-super-resolution-Unpaired-Image-Super-Resolution-using-Pseudo-Supervision/</url>
    <content><![CDATA[<html><head><style type="text/css">
                            .mjpage .MJX-monospace {
                            font-family: monospace
                            }

                            .mjpage .MJX-sans-serif {
                            font-family: sans-serif
                            }

                            .mjpage {
                            display: inline;
                            font-style: normal;
                            font-weight: normal;
                            line-height: normal;
                            font-size: 100%;
                            font-size-adjust: none;
                            text-indent: 0;
                            text-align: left;
                            text-transform: none;
                            letter-spacing: normal;
                            word-spacing: normal;
                            word-wrap: normal;
                            white-space: nowrap;
                            float: none;
                            direction: ltr;
                            max-width: none;
                            max-height: none;
                            min-width: 0;
                            min-height: 0;
                            border: 0;
                            padding: 0;
                            margin: 0
                            }

                            .mjpage * {
                            transition: none;
                            -webkit-transition: none;
                            -moz-transition: none;
                            -ms-transition: none;
                            -o-transition: none
                            }

                            .mjx-svg-href {
                            fill: blue;
                            stroke: blue
                            }

                            .MathJax_SVG_LineBox {
                            display: table!important
                            }

                            .MathJax_SVG_LineBox span {
                            display: table-cell!important;
                            width: 10000em!important;
                            min-width: 0;
                            max-width: none;
                            padding: 0;
                            border: 0;
                            margin: 0
                            }

                            .mjpage__block {
                            text-align: center;
                            margin: 1em 0em;
                            position: relative;
                            display: block!important;
                            text-indent: 0;
                            max-width: none;
                            max-height: none;
                            min-width: 0;
                            min-height: 0;
                            width: 100%
                            }</style></head><body><p><img src="/2020/09/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-super-resolution-Unpaired-Image-Super-Resolution-using-Pseudo-Supervision/1599704646816.png" alt></p>
<h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><ul>
<li>现有的图像超分，一般使用确定的操作对高分辨率图像进行降采样得到配对的数据，但这样的方法使得得到的低分辨率图像跟真实世界的低分辨率图像差异很大；</li>
<li>对于非配对的方法则存在不同程度的缺点。</li>
</ul>
<h3 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h3><ul>
<li>本文提出一种使用GAN网络进行非配对训练的超分方法，网络由一个非配对的噪声校正网络和一个伪配对SR网络组成。</li>
<li>校正网络去除噪声，调整输入LR图像的核；然后，通过SR网络对校正后的clean LR图像进行上采样。在训练阶段，校正网络也从输入的HR图像中生成一个伪clean LR图像，然后由SR网络配对学习伪clean LR图像到输入HR图像的映射。由于本文的SR网络是独立于校正网络的，现有网络架构和像素级损失函数可以与提出的框架集成。</li>
<li>在不同数据集上的实验表明，该方法优于现有的解决方法。</li>
</ul>
<a id="more"></a>
<h3 id="以前的不使用成对图像的方法"><a href="#以前的不使用成对图像的方法" class="headerlink" title="以前的不使用成对图像的方法"></a>以前的不使用成对图像的方法</h3><ul>
<li>第一种是直接方法：由生成器学习LR到HR的图像，然后跟真实的HR图像送入判别器判别，缺点是不能使用像素级的loss来训练生成器，导致生成的HR图像效果不佳；</li>
<li>第二种是非直接方法：由真实的HR图像通过生成器生成LR图像，再通过与真实的LR图像进行判别，同时另一个生成器学习从逼近的真实的LR图像到HR图像的生成，缺点是如果生成器生成的LR图像与真实世界的LR图像差别较大，则会导致测试时生成的HR图像效果不佳</li>
</ul>
<p><img src="/2020/09/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-super-resolution-Unpaired-Image-Super-Resolution-using-Pseudo-Supervision/1599699070996.png" alt></p>
<h3 id="本文的方法"><a href="#本文的方法" class="headerlink" title="本文的方法"></a>本文的方法</h3><p><img src="/2020/09/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-super-resolution-Unpaired-Image-Super-Resolution-using-Pseudo-Supervision/1599699544705.png" alt></p>
<p>同时克服了上述两种方法的缺点，将整个网络分离为一个未配对的核/噪声校正网络和一个伪配对的SR网络(图3)。</p>
<ul>
<li><p><strong>校正网络</strong>(基于cyclegan)</p>
<p>真实的HR的图像经过下采样和添加高斯模糊核等生成一个clean LR，然后通过Gyx与真实的LR图像对抗训练(相当于Gyx在进行内核校正和添加噪声，使得生成的LR图像和真实的LR图像在各个位置上的模糊程度和噪声基本相同)；</p>
<p>然后利用Gxy生成伪clean LR图像并与clean LR图像对抗训练(相当于Gxy学习去噪和去模糊的过程)</p>
</li>
<li><p><strong>超分网络</strong></p>
<p>将生成的伪clean LR图像输入一个上采样网络去生成SR图像，同时利用了真实的HR图像退化后的LR图像生成伪clean LR图像再上采样得到HR图像，可以引入像素的损失，同时做对抗训练，希望生成的SR图像跟真实世界的SR图像相似</p>
</li>
</ul>
<h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><ul>
<li><p>两个经典GAN的损失</p>
<span class="mjpage mjpage__block"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="48.917ex" height="7.843ex" style="vertical-align: -3.338ex;" viewbox="0 -1939.5 21061.4 3376.7" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">
\begin{array}{c}
\mathcal{L}_{a d v}\left(G_{X Y_{\downarrow}}, D_{Y_{\downarrow}}, X, Y_{\downarrow}\right)=\mathbb{E}_{y_{\downarrow} \sim P_{Y_{\downarrow}}}\left[\log D_{Y_{\downarrow}}\left(y_{\downarrow}\right)\right] \\
+\mathbb{E}_{x \sim P_{X}}\left[\log \left(1-D_{Y_{\downarrow}}\left(G_{X Y_{\downarrow}}(x)\right)\right)\right]
\end{array}</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJCAL-4C" d="M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E1-MJMATHI-47" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"/>
<path stroke-width="1" id="E1-MJMATHI-58" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/>
<path stroke-width="1" id="E1-MJMATHI-59" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-2193" d="M473 86Q483 86 483 67Q483 63 483 61T483 56T481 53T480 50T478 48T474 47T470 46T464 44Q428 35 391 14T316 -55T264 -168Q264 -170 263 -173T262 -180T261 -184Q259 -194 251 -194Q242 -194 238 -176T221 -121T180 -49Q169 -34 155 -21T125 2T95 20T67 33T44 42T27 47L21 49Q17 53 17 67Q17 87 28 87Q33 87 42 84Q158 52 223 -45L230 -55V312Q230 391 230 482T229 591Q229 662 231 676T243 693Q244 694 251 694Q264 692 270 679V-55L277 -45Q307 1 353 33T430 76T473 86Z"/>
<path stroke-width="1" id="E1-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E1-MJMATHI-44" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/>
<path stroke-width="1" id="E1-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E1-MJSZ1-28" d="M152 251Q152 646 388 850H416Q422 844 422 841Q422 837 403 816T357 753T302 649T255 482T236 250Q236 124 255 19T301 -147T356 -251T403 -315T422 -340Q422 -343 416 -349H388Q359 -325 332 -296T271 -213T212 -97T170 56T152 251Z"/>
<path stroke-width="1" id="E1-MJSZ1-29" d="M305 251Q305 -145 69 -349H56Q43 -349 39 -347T35 -338Q37 -333 60 -307T108 -239T160 -136T204 27T221 250T204 473T160 636T108 740T60 807T35 839Q35 850 50 850H56H69Q197 743 256 566Q305 425 305 251Z"/>
<path stroke-width="1" id="E1-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E1-MJAMS-45" d="M12 666Q12 675 24 683H582Q590 680 593 672V588Q593 514 591 502T575 490Q567 490 563 495T555 517Q552 556 517 590Q486 623 445 634T340 648H282Q266 636 264 620T260 492V370H277Q329 375 358 391T404 439Q420 480 420 506Q420 529 436 529Q445 529 451 521Q455 517 455 361Q455 333 455 298T456 253Q456 217 453 207T437 197Q420 196 420 217Q420 240 406 270Q377 328 284 335H260V201Q261 174 261 134Q262 73 264 61T278 38Q281 36 282 35H331Q400 35 449 50Q571 93 602 179Q605 203 622 203Q629 203 634 197T640 183Q638 181 624 95T604 3L600 -1H24Q12 5 12 16Q12 35 51 35Q92 38 97 52Q102 60 102 341T97 632Q91 645 51 648Q12 648 12 666ZM137 341Q137 131 136 89T130 37Q129 36 129 35H235Q233 41 231 48L226 61V623L231 635L235 648H129Q132 641 133 638T135 603T137 517T137 341ZM557 603V648H504Q504 646 515 639Q527 634 542 619L557 603ZM420 317V397L406 383Q394 370 380 363L366 355Q373 350 382 346Q400 333 409 328L420 317ZM582 61L586 88Q585 88 582 83Q557 61 526 46L511 37L542 35H577Q577 36 578 39T580 49T582 61Z"/>
<path stroke-width="1" id="E1-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMAIN-223C" d="M55 166Q55 241 101 304T222 367Q260 367 296 349T362 304T421 252T484 208T554 189Q616 189 655 236T694 338Q694 350 698 358T708 367Q722 367 722 334Q722 260 677 197T562 134H554Q517 134 481 152T414 196T355 248T292 293T223 311Q179 311 145 286Q109 257 96 218T80 156T69 133Q55 133 55 166Z"/>
<path stroke-width="1" id="E1-MJMATHI-50" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/>
<path stroke-width="1" id="E1-MJMAIN-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/>
<path stroke-width="1" id="E1-MJMAIN-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"/>
<path stroke-width="1" id="E1-MJMAIN-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"/>
<path stroke-width="1" id="E1-MJMAIN-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"/>
<path stroke-width="1" id="E1-MJMAIN-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/>
<path stroke-width="1" id="E1-MJSZ1-5B" d="M202 -349V850H394V810H242V-309H394V-349H202Z"/>
<path stroke-width="1" id="E1-MJSZ1-5D" d="M22 810V850H214V-349H22V-309H174V810H22Z"/>
<path stroke-width="1" id="E1-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
<path stroke-width="1" id="E1-MJMATHI-78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/>
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E1-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
<g transform="translate(167,0)">
<g transform="translate(-11,0)">
<g transform="translate(0,964)">
 <use xlink:href="#E1-MJCAL-4C" x="0" y="0"/>
<g transform="translate(690,-150)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-61" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-64" x="529" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-76" x="1053" y="0"/>
</g>
<g transform="translate(2045,0)">
 <use xlink:href="#E1-MJSZ1-28"/>
<g transform="translate(458,0)">
 <use xlink:href="#E1-MJMATHI-47" x="0" y="0"/>
<g transform="translate(786,-150)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-58" x="0" y="0"/>
<g transform="translate(602,0)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E1-MJMAIN-2193" x="716" y="-271"/>
</g>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-2C" x="2717" y="0"/>
<g transform="translate(3162,0)">
 <use xlink:href="#E1-MJMATHI-44" x="0" y="0"/>
<g transform="translate(828,-150)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E1-MJMAIN-2193" x="716" y="-271"/>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-2C" x="4859" y="0"/>
 <use xlink:href="#E1-MJMATHI-58" x="5305" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="6157" y="0"/>
<g transform="translate(6602,0)">
 <use xlink:href="#E1-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-2193" x="822" y="-213"/>
</g>
 <use xlink:href="#E1-MJSZ1-29" x="7638" y="-1"/>
</g>
 <use xlink:href="#E1-MJMAIN-3D" x="10419" y="0"/>
<g transform="translate(11475,0)">
 <use xlink:href="#E1-MJAMS-45" x="0" y="0"/>
<g transform="translate(667,-150)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-79" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E1-MJMAIN-2193" x="604" y="-304"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-223C" x="996" y="0"/>
<g transform="translate(1255,0)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-50" x="0" y="0"/>
<g transform="translate(454,-150)">
 <use transform="scale(0.574)" xlink:href="#E1-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E1-MJMAIN-2193" x="581" y="-351"/>
</g>
</g>
</g>
</g>
<g transform="translate(14868,0)">
 <use xlink:href="#E1-MJSZ1-5B"/>
<g transform="translate(417,0)">
 <use xlink:href="#E1-MJMAIN-6C"/>
 <use xlink:href="#E1-MJMAIN-6F" x="278" y="0"/>
 <use xlink:href="#E1-MJMAIN-67" x="779" y="0"/>
</g>
<g transform="translate(1863,0)">
 <use xlink:href="#E1-MJMATHI-44" x="0" y="0"/>
<g transform="translate(828,-150)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E1-MJMAIN-2193" x="716" y="-271"/>
</g>
</g>
<g transform="translate(3728,0)">
 <use xlink:href="#E1-MJMAIN-28"/>
<g transform="translate(389,0)">
 <use xlink:href="#E1-MJMATHI-79" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-2193" x="693" y="-213"/>
</g>
 <use xlink:href="#E1-MJMAIN-29" x="1333" y="0"/>
</g>
 <use xlink:href="#E1-MJSZ1-5D" x="5451" y="-1"/>
</g>
</g>
<g transform="translate(2954,-898)">
 <use xlink:href="#E1-MJMAIN-2B" x="0" y="0"/>
<g transform="translate(778,0)">
 <use xlink:href="#E1-MJAMS-45" x="0" y="0"/>
<g transform="translate(667,-150)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-78" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-223C" x="572" y="0"/>
<g transform="translate(955,0)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-50" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E1-MJMATHI-58" x="791" y="-260"/>
</g>
</g>
</g>
<g transform="translate(3682,0)">
 <use xlink:href="#E1-MJSZ1-5B"/>
<g transform="translate(417,0)">
 <use xlink:href="#E1-MJMAIN-6C"/>
 <use xlink:href="#E1-MJMAIN-6F" x="278" y="0"/>
 <use xlink:href="#E1-MJMAIN-67" x="779" y="0"/>
</g>
<g transform="translate(1697,0)">
 <use xlink:href="#E1-MJSZ1-28"/>
 <use xlink:href="#E1-MJMAIN-31" x="458" y="0"/>
 <use xlink:href="#E1-MJMAIN-2212" x="1181" y="0"/>
<g transform="translate(2181,0)">
 <use xlink:href="#E1-MJMATHI-44" x="0" y="0"/>
<g transform="translate(828,-150)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E1-MJMAIN-2193" x="716" y="-271"/>
</g>
</g>
<g transform="translate(4046,0)">
 <use xlink:href="#E1-MJSZ1-28"/>
<g transform="translate(458,0)">
 <use xlink:href="#E1-MJMATHI-47" x="0" y="0"/>
<g transform="translate(786,-150)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-58" x="0" y="0"/>
<g transform="translate(602,0)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E1-MJMAIN-2193" x="716" y="-271"/>
</g>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-28" x="2717" y="0"/>
 <use xlink:href="#E1-MJMATHI-78" x="3106" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="3679" y="0"/>
 <use xlink:href="#E1-MJSZ1-29" x="4068" y="-1"/>
</g>
 <use xlink:href="#E1-MJSZ1-29" x="8573" y="-1"/>
</g>
 <use xlink:href="#E1-MJSZ1-5D" x="10728" y="-1"/>
</g>
</g>
</g>
</g>
</g>
</svg></span><span class="mjpage mjpage__block"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="40.177ex" height="11.843ex" style="vertical-align: -5.338ex;" viewbox="0 -2800.6 17298.4 5098.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-2-Title">
<title id="MathJax-SVG-2-Title">
\begin{aligned}
&amp; \mathcal{L}_{a d v}\left(\left(G_{X Y_{\downarrow}}, G_{Y_{\downarrow} X}\right), D_{X_{\uparrow}}, Y_{\downarrow}, X_{\uparrow}\right) \\
=&amp; \mathbb{E}_{x \sim \mathrm{P}_{X}}\left[\log D_{X_{\uparrow}}\left(U_{Y_{\downarrow} Y} \circ G_{X Y_{\downarrow}}(x)\right)\right] \\
+&amp; \mathbb{E}_{y_{\downarrow} \sim \mathrm{P}_{Y_{\downarrow}}}\left[\log \left(1-D_{X_{\uparrow}}\left(U_{Y_{\downarrow} Y}\left(\stackrel{\circ}{y_{\downarrow}}\right)\right)\right)\right]
\end{aligned}</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E2-MJCAL-4C" d="M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z"/>
<path stroke-width="1" id="E2-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E2-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E2-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E2-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E2-MJMATHI-47" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"/>
<path stroke-width="1" id="E2-MJMATHI-58" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/>
<path stroke-width="1" id="E2-MJMATHI-59" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"/>
<path stroke-width="1" id="E2-MJMAIN-2193" d="M473 86Q483 86 483 67Q483 63 483 61T483 56T481 53T480 50T478 48T474 47T470 46T464 44Q428 35 391 14T316 -55T264 -168Q264 -170 263 -173T262 -180T261 -184Q259 -194 251 -194Q242 -194 238 -176T221 -121T180 -49Q169 -34 155 -21T125 2T95 20T67 33T44 42T27 47L21 49Q17 53 17 67Q17 87 28 87Q33 87 42 84Q158 52 223 -45L230 -55V312Q230 391 230 482T229 591Q229 662 231 676T243 693Q244 694 251 694Q264 692 270 679V-55L277 -45Q307 1 353 33T430 76T473 86Z"/>
<path stroke-width="1" id="E2-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E2-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E2-MJSZ1-28" d="M152 251Q152 646 388 850H416Q422 844 422 841Q422 837 403 816T357 753T302 649T255 482T236 250Q236 124 255 19T301 -147T356 -251T403 -315T422 -340Q422 -343 416 -349H388Q359 -325 332 -296T271 -213T212 -97T170 56T152 251Z"/>
<path stroke-width="1" id="E2-MJSZ1-29" d="M305 251Q305 -145 69 -349H56Q43 -349 39 -347T35 -338Q37 -333 60 -307T108 -239T160 -136T204 27T221 250T204 473T160 636T108 740T60 807T35 839Q35 850 50 850H56H69Q197 743 256 566Q305 425 305 251Z"/>
<path stroke-width="1" id="E2-MJMATHI-44" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/>
<path stroke-width="1" id="E2-MJMAIN-2191" d="M27 414Q17 414 17 433Q17 437 17 439T17 444T19 447T20 450T22 452T26 453T30 454T36 456Q80 467 120 494T180 549Q227 607 238 678Q240 694 251 694Q259 694 261 684Q261 677 265 659T284 608T320 549Q340 525 363 507T405 479T440 463T467 455T479 451Q483 447 483 433Q483 413 472 413Q467 413 458 416Q342 448 277 545L270 555V-179Q262 -193 252 -193H250H248Q236 -193 230 -179V555L223 545Q192 499 146 467T70 424T27 414Z"/>
<path stroke-width="1" id="E2-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E2-MJAMS-45" d="M12 666Q12 675 24 683H582Q590 680 593 672V588Q593 514 591 502T575 490Q567 490 563 495T555 517Q552 556 517 590Q486 623 445 634T340 648H282Q266 636 264 620T260 492V370H277Q329 375 358 391T404 439Q420 480 420 506Q420 529 436 529Q445 529 451 521Q455 517 455 361Q455 333 455 298T456 253Q456 217 453 207T437 197Q420 196 420 217Q420 240 406 270Q377 328 284 335H260V201Q261 174 261 134Q262 73 264 61T278 38Q281 36 282 35H331Q400 35 449 50Q571 93 602 179Q605 203 622 203Q629 203 634 197T640 183Q638 181 624 95T604 3L600 -1H24Q12 5 12 16Q12 35 51 35Q92 38 97 52Q102 60 102 341T97 632Q91 645 51 648Q12 648 12 666ZM137 341Q137 131 136 89T130 37Q129 36 129 35H235Q233 41 231 48L226 61V623L231 635L235 648H129Q132 641 133 638T135 603T137 517T137 341ZM557 603V648H504Q504 646 515 639Q527 634 542 619L557 603ZM420 317V397L406 383Q394 370 380 363L366 355Q373 350 382 346Q400 333 409 328L420 317ZM582 61L586 88Q585 88 582 83Q557 61 526 46L511 37L542 35H577Q577 36 578 39T580 49T582 61Z"/>
<path stroke-width="1" id="E2-MJMATHI-78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/>
<path stroke-width="1" id="E2-MJMAIN-223C" d="M55 166Q55 241 101 304T222 367Q260 367 296 349T362 304T421 252T484 208T554 189Q616 189 655 236T694 338Q694 350 698 358T708 367Q722 367 722 334Q722 260 677 197T562 134H554Q517 134 481 152T414 196T355 248T292 293T223 311Q179 311 145 286Q109 257 96 218T80 156T69 133Q55 133 55 166Z"/>
<path stroke-width="1" id="E2-MJMAIN-50" d="M130 622Q123 629 119 631T103 634T60 637H27V683H214Q237 683 276 683T331 684Q419 684 471 671T567 616Q624 563 624 489Q624 421 573 372T451 307Q429 302 328 301H234V181Q234 62 237 58Q245 47 304 46H337V0H326Q305 3 182 3Q47 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM507 488Q507 514 506 528T500 564T483 597T450 620T397 635Q385 637 307 637H286Q237 637 234 628Q231 624 231 483V342H302H339Q390 342 423 349T481 382Q507 411 507 488Z"/>
<path stroke-width="1" id="E2-MJMAIN-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/>
<path stroke-width="1" id="E2-MJMAIN-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"/>
<path stroke-width="1" id="E2-MJMAIN-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"/>
<path stroke-width="1" id="E2-MJMAIN-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"/>
<path stroke-width="1" id="E2-MJMATHI-55" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/>
<path stroke-width="1" id="E2-MJMAIN-2218" d="M55 251Q55 328 112 386T249 444T386 388T444 249Q444 171 388 113T250 55Q170 55 113 112T55 251ZM245 403Q188 403 142 361T96 250Q96 183 141 140T250 96Q284 96 313 109T354 135T375 160Q403 197 403 250Q403 313 360 358T245 403Z"/>
<path stroke-width="1" id="E2-MJMAIN-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/>
<path stroke-width="1" id="E2-MJSZ1-5B" d="M202 -349V850H394V810H242V-309H394V-349H202Z"/>
<path stroke-width="1" id="E2-MJSZ1-5D" d="M22 810V850H214V-349H22V-309H174V810H22Z"/>
<path stroke-width="1" id="E2-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
<path stroke-width="1" id="E2-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E2-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E2-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E2-MJSZ2-28" d="M180 96T180 250T205 541T266 770T353 944T444 1069T527 1150H555Q561 1144 561 1141Q561 1137 545 1120T504 1072T447 995T386 878T330 721T288 513T272 251Q272 133 280 56Q293 -87 326 -209T399 -405T475 -531T536 -609T561 -640Q561 -643 555 -649H527Q483 -612 443 -568T353 -443T266 -270T205 -41Z"/>
<path stroke-width="1" id="E2-MJSZ2-29" d="M35 1138Q35 1150 51 1150H56H69Q113 1113 153 1069T243 944T330 771T391 541T416 250T391 -40T330 -270T243 -443T152 -568T69 -649H56Q43 -649 39 -647T35 -637Q65 -607 110 -548Q283 -316 316 56Q324 133 324 251Q324 368 316 445Q278 877 48 1123Q36 1137 35 1138Z"/>
<path stroke-width="1" id="E2-MJSZ2-5B" d="M224 -649V1150H455V1099H275V-598H455V-649H224Z"/>
<path stroke-width="1" id="E2-MJSZ2-5D" d="M16 1099V1150H247V-649H16V-598H196V1099H16Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
<g transform="translate(167,0)">
<g transform="translate(-11,0)">
 <use xlink:href="#E2-MJMAIN-3D" x="0" y="300"/>
 <use xlink:href="#E2-MJMAIN-2B" x="0" y="-1568"/>
</g>
<g transform="translate(768,0)">
<g transform="translate(0,1867)">
 <use xlink:href="#E2-MJCAL-4C" x="0" y="0"/>
<g transform="translate(690,-150)">
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-61" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-64" x="529" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-76" x="1053" y="0"/>
</g>
<g transform="translate(2045,0)">
 <use xlink:href="#E2-MJSZ1-28"/>
<g transform="translate(458,0)">
 <use xlink:href="#E2-MJSZ1-28"/>
<g transform="translate(458,0)">
 <use xlink:href="#E2-MJMATHI-47" x="0" y="0"/>
<g transform="translate(786,-150)">
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-58" x="0" y="0"/>
<g transform="translate(602,0)">
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E2-MJMAIN-2193" x="716" y="-271"/>
</g>
</g>
</g>
 <use xlink:href="#E2-MJMAIN-2C" x="2717" y="0"/>
<g transform="translate(3162,0)">
 <use xlink:href="#E2-MJMATHI-47" x="0" y="0"/>
<g transform="translate(786,-150)">
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E2-MJMAIN-2193" x="716" y="-271"/>
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-58" x="1087" y="0"/>
</g>
</g>
 <use xlink:href="#E2-MJSZ1-29" x="5420" y="-1"/>
</g>
 <use xlink:href="#E2-MJMAIN-2C" x="6504" y="0"/>
<g transform="translate(6949,0)">
 <use xlink:href="#E2-MJMATHI-44" x="0" y="0"/>
<g transform="translate(828,-150)">
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-58" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E2-MJMAIN-2191" x="1020" y="-271"/>
</g>
</g>
 <use xlink:href="#E2-MJMAIN-2C" x="8821" y="0"/>
<g transform="translate(9267,0)">
 <use xlink:href="#E2-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E2-MJMAIN-2193" x="822" y="-213"/>
</g>
 <use xlink:href="#E2-MJMAIN-2C" x="10302" y="0"/>
<g transform="translate(10747,0)">
 <use xlink:href="#E2-MJMATHI-58" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E2-MJMAIN-2191" x="1171" y="-213"/>
</g>
 <use xlink:href="#E2-MJSZ1-29" x="12030" y="-1"/>
</g>
</g>
<g transform="translate(0,300)">
 <use xlink:href="#E2-MJAMS-45" x="0" y="0"/>
<g transform="translate(667,-150)">
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-78" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E2-MJMAIN-223C" x="572" y="0"/>
<g transform="translate(955,0)">
 <use transform="scale(0.707)" xlink:href="#E2-MJMAIN-50" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E2-MJMATHI-58" x="839" y="-260"/>
</g>
</g>
<g transform="translate(2931,0)">
 <use xlink:href="#E2-MJSZ1-5B"/>
<g transform="translate(417,0)">
 <use xlink:href="#E2-MJMAIN-6C"/>
 <use xlink:href="#E2-MJMAIN-6F" x="278" y="0"/>
 <use xlink:href="#E2-MJMAIN-67" x="779" y="0"/>
</g>
<g transform="translate(1863,0)">
 <use xlink:href="#E2-MJMATHI-44" x="0" y="0"/>
<g transform="translate(828,-150)">
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-58" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E2-MJMAIN-2191" x="1020" y="-271"/>
</g>
</g>
<g transform="translate(3902,0)">
 <use xlink:href="#E2-MJSZ1-28"/>
<g transform="translate(458,0)">
 <use xlink:href="#E2-MJMATHI-55" x="0" y="0"/>
<g transform="translate(683,-150)">
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E2-MJMAIN-2193" x="716" y="-271"/>
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-59" x="1087" y="0"/>
</g>
</g>
 <use xlink:href="#E2-MJMAIN-2218" x="2773" y="0"/>
<g transform="translate(3496,0)">
 <use xlink:href="#E2-MJMATHI-47" x="0" y="0"/>
<g transform="translate(786,-150)">
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-58" x="0" y="0"/>
<g transform="translate(602,0)">
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E2-MJMAIN-2193" x="716" y="-271"/>
</g>
</g>
</g>
 <use xlink:href="#E2-MJMAIN-28" x="5754" y="0"/>
 <use xlink:href="#E2-MJMATHI-78" x="6144" y="0"/>
 <use xlink:href="#E2-MJMAIN-29" x="6716" y="0"/>
 <use xlink:href="#E2-MJSZ1-29" x="7106" y="-1"/>
</g>
 <use xlink:href="#E2-MJSZ1-5D" x="11467" y="-1"/>
</g>
</g>
<g transform="translate(0,-1568)">
 <use xlink:href="#E2-MJAMS-45" x="0" y="0"/>
<g transform="translate(667,-150)">
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-79" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E2-MJMAIN-2193" x="604" y="-304"/>
 <use transform="scale(0.707)" xlink:href="#E2-MJMAIN-223C" x="996" y="0"/>
<g transform="translate(1255,0)">
 <use transform="scale(0.707)" xlink:href="#E2-MJMAIN-50" x="0" y="0"/>
<g transform="translate(481,-150)">
 <use transform="scale(0.574)" xlink:href="#E2-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E2-MJMAIN-2193" x="581" y="-351"/>
</g>
</g>
</g>
<g transform="translate(3420,0)">
 <use xlink:href="#E2-MJSZ2-5B"/>
<g transform="translate(472,0)">
 <use xlink:href="#E2-MJMAIN-6C"/>
 <use xlink:href="#E2-MJMAIN-6F" x="278" y="0"/>
 <use xlink:href="#E2-MJMAIN-67" x="779" y="0"/>
</g>
<g transform="translate(1752,0)">
 <use xlink:href="#E2-MJSZ2-28"/>
 <use xlink:href="#E2-MJMAIN-31" x="597" y="0"/>
 <use xlink:href="#E2-MJMAIN-2212" x="1320" y="0"/>
<g transform="translate(2320,0)">
 <use xlink:href="#E2-MJMATHI-44" x="0" y="0"/>
<g transform="translate(828,-150)">
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-58" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E2-MJMAIN-2191" x="1020" y="-271"/>
</g>
</g>
<g transform="translate(4359,0)">
 <use xlink:href="#E2-MJSZ2-28"/>
<g transform="translate(597,0)">
 <use xlink:href="#E2-MJMATHI-55" x="0" y="0"/>
<g transform="translate(683,-150)">
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E2-MJMAIN-2193" x="716" y="-271"/>
 <use transform="scale(0.707)" xlink:href="#E2-MJMATHI-59" x="1087" y="0"/>
</g>
</g>
<g transform="translate(2856,0)">
 <use xlink:href="#E2-MJSZ2-28"/>
<g transform="translate(597,0)">
 <use xlink:href="#E2-MJMATHI-79" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E2-MJMAIN-2193" x="693" y="-213"/>
 <use transform="scale(0.707)" xlink:href="#E2-MJMAIN-2218" x="417" y="856"/>
</g>
 <use xlink:href="#E2-MJSZ2-29" x="1541" y="-1"/>
</g>
 <use xlink:href="#E2-MJSZ2-29" x="4996" y="-1"/>
</g>
 <use xlink:href="#E2-MJSZ2-29" x="9953" y="-1"/>
</g>
 <use xlink:href="#E2-MJSZ2-5D" x="12303" y="-1"/>
</g>
</g>
</g>
</g>
</g>
</svg></span></li>
<li><p>cyclegan的循环一致性损失</p>
<span class="mjpage mjpage__block"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="46.706ex" height="3.676ex" style="vertical-align: -1.338ex;" viewbox="0 -1006.6 20109.6 1582.7" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-3-Title">
<title id="MathJax-SVG-3-Title">
\mathcal{L}_{c y c}\left(G_{Y_{\downarrow} X}, G_{X Y_{\downarrow}}\right)=\left\|G_{X Y_{\downarrow}} \circ G_{Y_{\downarrow} X}\left(y_{\downarrow}\right)-y_{\downarrow}\right\|_{1}</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E3-MJCAL-4C" d="M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z"/>
<path stroke-width="1" id="E3-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E3-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E3-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E3-MJMATHI-47" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"/>
<path stroke-width="1" id="E3-MJMATHI-59" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"/>
<path stroke-width="1" id="E3-MJMAIN-2193" d="M473 86Q483 86 483 67Q483 63 483 61T483 56T481 53T480 50T478 48T474 47T470 46T464 44Q428 35 391 14T316 -55T264 -168Q264 -170 263 -173T262 -180T261 -184Q259 -194 251 -194Q242 -194 238 -176T221 -121T180 -49Q169 -34 155 -21T125 2T95 20T67 33T44 42T27 47L21 49Q17 53 17 67Q17 87 28 87Q33 87 42 84Q158 52 223 -45L230 -55V312Q230 391 230 482T229 591Q229 662 231 676T243 693Q244 694 251 694Q264 692 270 679V-55L277 -45Q307 1 353 33T430 76T473 86Z"/>
<path stroke-width="1" id="E3-MJMATHI-58" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/>
<path stroke-width="1" id="E3-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E3-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E3-MJSZ1-28" d="M152 251Q152 646 388 850H416Q422 844 422 841Q422 837 403 816T357 753T302 649T255 482T236 250Q236 124 255 19T301 -147T356 -251T403 -315T422 -340Q422 -343 416 -349H388Q359 -325 332 -296T271 -213T212 -97T170 56T152 251Z"/>
<path stroke-width="1" id="E3-MJSZ1-29" d="M305 251Q305 -145 69 -349H56Q43 -349 39 -347T35 -338Q37 -333 60 -307T108 -239T160 -136T204 27T221 250T204 473T160 636T108 740T60 807T35 839Q35 850 50 850H56H69Q197 743 256 566Q305 425 305 251Z"/>
<path stroke-width="1" id="E3-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E3-MJMAIN-2225" d="M133 736Q138 750 153 750Q164 750 170 739Q172 735 172 250T170 -239Q164 -250 152 -250Q144 -250 138 -244L137 -243Q133 -241 133 -179T132 250Q132 731 133 736ZM329 739Q334 750 346 750Q353 750 361 744L362 743Q366 741 366 679T367 250T367 -178T362 -243L361 -244Q355 -250 347 -250Q335 -250 329 -239Q327 -235 327 250T329 739Z"/>
<path stroke-width="1" id="E3-MJMAIN-2218" d="M55 251Q55 328 112 386T249 444T386 388T444 249Q444 171 388 113T250 55Q170 55 113 112T55 251ZM245 403Q188 403 142 361T96 250Q96 183 141 140T250 96Q284 96 313 109T354 135T375 160Q403 197 403 250Q403 313 360 358T245 403Z"/>
<path stroke-width="1" id="E3-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E3-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E3-MJCAL-4C" x="0" y="0"/>
<g transform="translate(690,-150)">
 <use transform="scale(0.707)" xlink:href="#E3-MJMATHI-63" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E3-MJMATHI-79" x="433" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E3-MJMATHI-63" x="930" y="0"/>
</g>
<g transform="translate(1922,0)">
 <use xlink:href="#E3-MJSZ1-28"/>
<g transform="translate(458,0)">
 <use xlink:href="#E3-MJMATHI-47" x="0" y="0"/>
<g transform="translate(786,-150)">
 <use transform="scale(0.707)" xlink:href="#E3-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E3-MJMAIN-2193" x="716" y="-271"/>
 <use transform="scale(0.707)" xlink:href="#E3-MJMATHI-58" x="1087" y="0"/>
</g>
</g>
 <use xlink:href="#E3-MJMAIN-2C" x="2717" y="0"/>
<g transform="translate(3162,0)">
 <use xlink:href="#E3-MJMATHI-47" x="0" y="0"/>
<g transform="translate(786,-150)">
 <use transform="scale(0.707)" xlink:href="#E3-MJMATHI-58" x="0" y="0"/>
<g transform="translate(602,0)">
 <use transform="scale(0.707)" xlink:href="#E3-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E3-MJMAIN-2193" x="716" y="-271"/>
</g>
</g>
</g>
 <use xlink:href="#E3-MJSZ1-29" x="5420" y="-1"/>
</g>
 <use xlink:href="#E3-MJMAIN-3D" x="8079" y="0"/>
<g transform="translate(9135,0)">
<g transform="translate(0,917)">
 <use xlink:href="#E3-MJMAIN-2225" x="0" y="-751"/>
 <use xlink:href="#E3-MJMAIN-2225" x="0" y="-1084"/>
</g>
<g transform="translate(500,0)">
 <use xlink:href="#E3-MJMATHI-47" x="0" y="0"/>
<g transform="translate(786,-150)">
 <use transform="scale(0.707)" xlink:href="#E3-MJMATHI-58" x="0" y="0"/>
<g transform="translate(602,0)">
 <use transform="scale(0.707)" xlink:href="#E3-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E3-MJMAIN-2193" x="716" y="-271"/>
</g>
</g>
</g>
 <use xlink:href="#E3-MJMAIN-2218" x="2981" y="0"/>
<g transform="translate(3703,0)">
 <use xlink:href="#E3-MJMATHI-47" x="0" y="0"/>
<g transform="translate(786,-150)">
 <use transform="scale(0.707)" xlink:href="#E3-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E3-MJMAIN-2193" x="716" y="-271"/>
 <use transform="scale(0.707)" xlink:href="#E3-MJMATHI-58" x="1087" y="0"/>
</g>
</g>
<g transform="translate(6129,0)">
 <use xlink:href="#E3-MJMAIN-28"/>
<g transform="translate(389,0)">
 <use xlink:href="#E3-MJMATHI-79" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E3-MJMAIN-2193" x="693" y="-213"/>
</g>
 <use xlink:href="#E3-MJMAIN-29" x="1333" y="0"/>
</g>
 <use xlink:href="#E3-MJMAIN-2212" x="8074" y="0"/>
<g transform="translate(9075,0)">
 <use xlink:href="#E3-MJMATHI-79" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E3-MJMAIN-2193" x="693" y="-213"/>
</g>
<g transform="translate(10019,917)">
 <use xlink:href="#E3-MJMAIN-2225" x="0" y="-751"/>
 <use xlink:href="#E3-MJMAIN-2225" x="0" y="-1084"/>
</g>
 <use transform="scale(0.707)" xlink:href="#E3-MJMAIN-31" x="14878" y="-641"/>
</g>
</g>
</svg></span></li>
<li><p>身份匹配损失：(避免色差等，其实就是为了避免经过去噪网络后像素差异过大)</p>
<span class="mjpage mjpage__block"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="32.766ex" height="3.676ex" style="vertical-align: -1.338ex;" viewbox="0 -1006.6 14107.7 1582.7" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-4-Title">
<title id="MathJax-SVG-4-Title">
\mathcal{L}_{i d t}\left(G_{X Y_{\downarrow}}\right)=\left\|G_{X Y_{\downarrow}}\left(y_{\downarrow}\right)-y_{\downarrow}\right\|_{1}</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E4-MJCAL-4C" d="M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z"/>
<path stroke-width="1" id="E4-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E4-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E4-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E4-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E4-MJMATHI-47" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"/>
<path stroke-width="1" id="E4-MJMATHI-58" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/>
<path stroke-width="1" id="E4-MJMATHI-59" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"/>
<path stroke-width="1" id="E4-MJMAIN-2193" d="M473 86Q483 86 483 67Q483 63 483 61T483 56T481 53T480 50T478 48T474 47T470 46T464 44Q428 35 391 14T316 -55T264 -168Q264 -170 263 -173T262 -180T261 -184Q259 -194 251 -194Q242 -194 238 -176T221 -121T180 -49Q169 -34 155 -21T125 2T95 20T67 33T44 42T27 47L21 49Q17 53 17 67Q17 87 28 87Q33 87 42 84Q158 52 223 -45L230 -55V312Q230 391 230 482T229 591Q229 662 231 676T243 693Q244 694 251 694Q264 692 270 679V-55L277 -45Q307 1 353 33T430 76T473 86Z"/>
<path stroke-width="1" id="E4-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E4-MJSZ1-28" d="M152 251Q152 646 388 850H416Q422 844 422 841Q422 837 403 816T357 753T302 649T255 482T236 250Q236 124 255 19T301 -147T356 -251T403 -315T422 -340Q422 -343 416 -349H388Q359 -325 332 -296T271 -213T212 -97T170 56T152 251Z"/>
<path stroke-width="1" id="E4-MJSZ1-29" d="M305 251Q305 -145 69 -349H56Q43 -349 39 -347T35 -338Q37 -333 60 -307T108 -239T160 -136T204 27T221 250T204 473T160 636T108 740T60 807T35 839Q35 850 50 850H56H69Q197 743 256 566Q305 425 305 251Z"/>
<path stroke-width="1" id="E4-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E4-MJMAIN-2225" d="M133 736Q138 750 153 750Q164 750 170 739Q172 735 172 250T170 -239Q164 -250 152 -250Q144 -250 138 -244L137 -243Q133 -241 133 -179T132 250Q132 731 133 736ZM329 739Q334 750 346 750Q353 750 361 744L362 743Q366 741 366 679T367 250T367 -178T362 -243L361 -244Q355 -250 347 -250Q335 -250 329 -239Q327 -235 327 250T329 739Z"/>
<path stroke-width="1" id="E4-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E4-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E4-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E4-MJCAL-4C" x="0" y="0"/>
<g transform="translate(690,-150)">
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-69" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-64" x="345" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-74" x="869" y="0"/>
</g>
<g transform="translate(1827,0)">
 <use xlink:href="#E4-MJSZ1-28"/>
<g transform="translate(458,0)">
 <use xlink:href="#E4-MJMATHI-47" x="0" y="0"/>
<g transform="translate(786,-150)">
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-58" x="0" y="0"/>
<g transform="translate(602,0)">
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E4-MJMAIN-2193" x="716" y="-271"/>
</g>
</g>
</g>
 <use xlink:href="#E4-MJSZ1-29" x="2717" y="-1"/>
</g>
 <use xlink:href="#E4-MJMAIN-3D" x="5280" y="0"/>
<g transform="translate(6336,0)">
<g transform="translate(0,917)">
 <use xlink:href="#E4-MJMAIN-2225" x="0" y="-751"/>
 <use xlink:href="#E4-MJMAIN-2225" x="0" y="-1084"/>
</g>
<g transform="translate(500,0)">
 <use xlink:href="#E4-MJMATHI-47" x="0" y="0"/>
<g transform="translate(786,-150)">
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-58" x="0" y="0"/>
<g transform="translate(602,0)">
 <use transform="scale(0.707)" xlink:href="#E4-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E4-MJMAIN-2193" x="716" y="-271"/>
</g>
</g>
</g>
<g transform="translate(2925,0)">
 <use xlink:href="#E4-MJMAIN-28"/>
<g transform="translate(389,0)">
 <use xlink:href="#E4-MJMATHI-79" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E4-MJMAIN-2193" x="693" y="-213"/>
</g>
 <use xlink:href="#E4-MJMAIN-29" x="1333" y="0"/>
</g>
 <use xlink:href="#E4-MJMAIN-2212" x="4871" y="0"/>
<g transform="translate(5872,0)">
 <use xlink:href="#E4-MJMATHI-79" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E4-MJMAIN-2193" x="693" y="-213"/>
</g>
<g transform="translate(6816,917)">
 <use xlink:href="#E4-MJMAIN-2225" x="0" y="-751"/>
 <use xlink:href="#E4-MJMAIN-2225" x="0" y="-1084"/>
</g>
 <use transform="scale(0.707)" xlink:href="#E4-MJMAIN-31" x="10347" y="-641"/>
</g>
</g>
</svg></span></li>
<li><p>几何损失：为了保证旋转和翻转后的图片不会改变结果，其实就是约束去噪过程的一致性，可以理解为一张图片，经过八组不同的改变，再经过Gxy，最后结果是一致的</p>
<span class="mjpage mjpage__block"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="55.416ex" height="7.509ex" style="vertical-align: -3.171ex;" viewbox="0 -1867.7 23859.5 3233.2" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-5-Title">
<title id="MathJax-SVG-5-Title">
\mathcal{L}_{g e o}\left(G_{X Y_{\downarrow}}\right)=\left\|G_{X Y_{\downarrow}}(x)-\sum_{i=1}^{8} T_{i}^{-1}\left(G_{X Y_{\downarrow}}\left(T_{i}(x)\right)\right) / 8\right\|_{1}</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E5-MJCAL-4C" d="M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z"/>
<path stroke-width="1" id="E5-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
<path stroke-width="1" id="E5-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E5-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E5-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E5-MJMATHI-47" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"/>
<path stroke-width="1" id="E5-MJMATHI-58" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/>
<path stroke-width="1" id="E5-MJMATHI-59" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"/>
<path stroke-width="1" id="E5-MJMAIN-2193" d="M473 86Q483 86 483 67Q483 63 483 61T483 56T481 53T480 50T478 48T474 47T470 46T464 44Q428 35 391 14T316 -55T264 -168Q264 -170 263 -173T262 -180T261 -184Q259 -194 251 -194Q242 -194 238 -176T221 -121T180 -49Q169 -34 155 -21T125 2T95 20T67 33T44 42T27 47L21 49Q17 53 17 67Q17 87 28 87Q33 87 42 84Q158 52 223 -45L230 -55V312Q230 391 230 482T229 591Q229 662 231 676T243 693Q244 694 251 694Q264 692 270 679V-55L277 -45Q307 1 353 33T430 76T473 86Z"/>
<path stroke-width="1" id="E5-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E5-MJSZ1-28" d="M152 251Q152 646 388 850H416Q422 844 422 841Q422 837 403 816T357 753T302 649T255 482T236 250Q236 124 255 19T301 -147T356 -251T403 -315T422 -340Q422 -343 416 -349H388Q359 -325 332 -296T271 -213T212 -97T170 56T152 251Z"/>
<path stroke-width="1" id="E5-MJSZ1-29" d="M305 251Q305 -145 69 -349H56Q43 -349 39 -347T35 -338Q37 -333 60 -307T108 -239T160 -136T204 27T221 250T204 473T160 636T108 740T60 807T35 839Q35 850 50 850H56H69Q197 743 256 566Q305 425 305 251Z"/>
<path stroke-width="1" id="E5-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E5-MJMAIN-2225" d="M133 736Q138 750 153 750Q164 750 170 739Q172 735 172 250T170 -239Q164 -250 152 -250Q144 -250 138 -244L137 -243Q133 -241 133 -179T132 250Q132 731 133 736ZM329 739Q334 750 346 750Q353 750 361 744L362 743Q366 741 366 679T367 250T367 -178T362 -243L361 -244Q355 -250 347 -250Q335 -250 329 -239Q327 -235 327 250T329 739Z"/>
<path stroke-width="1" id="E5-MJMATHI-78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/>
<path stroke-width="1" id="E5-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E5-MJSZ2-2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"/>
<path stroke-width="1" id="E5-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E5-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E5-MJMAIN-38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"/>
<path stroke-width="1" id="E5-MJMATHI-54" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/>
<path stroke-width="1" id="E5-MJMAIN-2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E5-MJCAL-4C" x="0" y="0"/>
<g transform="translate(690,-150)">
 <use transform="scale(0.707)" xlink:href="#E5-MJMATHI-67" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E5-MJMATHI-65" x="480" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E5-MJMATHI-6F" x="947" y="0"/>
</g>
<g transform="translate(1970,0)">
 <use xlink:href="#E5-MJSZ1-28"/>
<g transform="translate(458,0)">
 <use xlink:href="#E5-MJMATHI-47" x="0" y="0"/>
<g transform="translate(786,-150)">
 <use transform="scale(0.707)" xlink:href="#E5-MJMATHI-58" x="0" y="0"/>
<g transform="translate(602,0)">
 <use transform="scale(0.707)" xlink:href="#E5-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E5-MJMAIN-2193" x="716" y="-271"/>
</g>
</g>
</g>
 <use xlink:href="#E5-MJSZ1-29" x="2717" y="-1"/>
</g>
 <use xlink:href="#E5-MJMAIN-3D" x="5423" y="0"/>
<g transform="translate(6479,0)">
<g transform="translate(0,1722)">
 <use xlink:href="#E5-MJMAIN-2225" x="0" y="-751"/>
<g transform="translate(0,-1732.4407335561314) scale(1,1.0392020420188168)">
 <use xlink:href="#E5-MJMAIN-2225"/>
</g>
 <use xlink:href="#E5-MJMAIN-2225" x="0" y="-2695"/>
</g>
<g transform="translate(500,0)">
 <use xlink:href="#E5-MJMATHI-47" x="0" y="0"/>
<g transform="translate(786,-150)">
 <use transform="scale(0.707)" xlink:href="#E5-MJMATHI-58" x="0" y="0"/>
<g transform="translate(602,0)">
 <use transform="scale(0.707)" xlink:href="#E5-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E5-MJMAIN-2193" x="716" y="-271"/>
</g>
</g>
</g>
 <use xlink:href="#E5-MJMAIN-28" x="2759" y="0"/>
 <use xlink:href="#E5-MJMATHI-78" x="3148" y="0"/>
 <use xlink:href="#E5-MJMAIN-29" x="3721" y="0"/>
 <use xlink:href="#E5-MJMAIN-2212" x="4332" y="0"/>
<g transform="translate(5333,0)">
 <use xlink:href="#E5-MJSZ2-2211" x="0" y="0"/>
<g transform="translate(147,-1090)">
 <use transform="scale(0.707)" xlink:href="#E5-MJMATHI-69" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E5-MJMAIN-3D" x="345" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E5-MJMAIN-31" x="1124" y="0"/>
</g>
 <use transform="scale(0.707)" xlink:href="#E5-MJMAIN-38" x="771" y="1627"/>
</g>
<g transform="translate(6944,0)">
 <use xlink:href="#E5-MJMATHI-54" x="0" y="0"/>
<g transform="translate(740,403)">
 <use transform="scale(0.707)" xlink:href="#E5-MJMAIN-2212" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E5-MJMAIN-31" x="778" y="0"/>
</g>
 <use transform="scale(0.707)" xlink:href="#E5-MJMATHI-69" x="826" y="-430"/>
</g>
<g transform="translate(8856,0)">
 <use xlink:href="#E5-MJSZ1-28"/>
<g transform="translate(458,0)">
 <use xlink:href="#E5-MJMATHI-47" x="0" y="0"/>
<g transform="translate(786,-150)">
 <use transform="scale(0.707)" xlink:href="#E5-MJMATHI-58" x="0" y="0"/>
<g transform="translate(602,0)">
 <use transform="scale(0.707)" xlink:href="#E5-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E5-MJMAIN-2193" x="716" y="-271"/>
</g>
</g>
</g>
<g transform="translate(2883,0)">
 <use xlink:href="#E5-MJMAIN-28" x="0" y="0"/>
<g transform="translate(389,0)">
 <use xlink:href="#E5-MJMATHI-54" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E5-MJMATHI-69" x="826" y="-213"/>
</g>
 <use xlink:href="#E5-MJMAIN-28" x="1318" y="0"/>
 <use xlink:href="#E5-MJMATHI-78" x="1707" y="0"/>
 <use xlink:href="#E5-MJMAIN-29" x="2280" y="0"/>
 <use xlink:href="#E5-MJMAIN-29" x="2669" y="0"/>
</g>
 <use xlink:href="#E5-MJSZ1-29" x="5942" y="-1"/>
</g>
 <use xlink:href="#E5-MJMAIN-2F" x="15424" y="0"/>
 <use xlink:href="#E5-MJMAIN-38" x="15924" y="0"/>
<g transform="translate(16425,1722)">
 <use xlink:href="#E5-MJMAIN-2225" x="0" y="-751"/>
<g transform="translate(0,-1732.4407335561314) scale(1,1.0392020420188168)">
 <use xlink:href="#E5-MJMAIN-2225"/>
</g>
 <use xlink:href="#E5-MJMAIN-2225" x="0" y="-2695"/>
</g>
 <use transform="scale(0.707)" xlink:href="#E5-MJMAIN-31" x="23936" y="-1780"/>
</g>
</g>
</svg></span></li>
<li><p>总的损失：</p>
<span class="mjpage mjpage__block"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="44.191ex" height="21.509ex" style="vertical-align: -10.171ex;" viewbox="0 -4881.6 19026.7 9260.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-6-Title">
<title id="MathJax-SVG-6-Title">
\begin{aligned}
\mathcal{L}_{\text {trans}} &amp;=\mathcal{L}_{\text {adv}}\left(G_{X Y_{\downarrow}}, D_{Y_{\downarrow}}, X, Y_{\downarrow}\right) \\
&amp;+\mathcal{L}_{\text {adv}}\left(G_{Y_{\downarrow} X}, D_{X}, Y_{\downarrow}, X\right) \\
&amp;+\gamma \mathcal{L}_{\text {adv}}\left(\left(G_{X Y_{\downarrow}}, G_{Y_{\downarrow} X}\right), D_{X_{\uparrow}}, Y_{\downarrow}, X_{\uparrow}\right) \\
&amp;+\lambda_{\text {cyc}} \mathcal{L}_{\text {cyc}}\left(G_{Y_{\downarrow} X}, G_{X Y_{\downarrow}}\right) \\
&amp;+\lambda_{\text {idt}} \mathcal{L}_{\text {idt}}\left(G_{X Y_{\downarrow}}\right) \\
&amp;+\lambda_{g e o} \mathcal{L}_{g e o}\left(G_{X Y_{\downarrow}}\right)
\end{aligned}</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E6-MJCAL-4C" d="M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z"/>
<path stroke-width="1" id="E6-MJMAIN-74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z"/>
<path stroke-width="1" id="E6-MJMAIN-72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z"/>
<path stroke-width="1" id="E6-MJMAIN-61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z"/>
<path stroke-width="1" id="E6-MJMAIN-6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/>
<path stroke-width="1" id="E6-MJMAIN-73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"/>
<path stroke-width="1" id="E6-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E6-MJMAIN-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"/>
<path stroke-width="1" id="E6-MJMAIN-76" d="M338 431Q344 429 422 429Q479 429 503 431H508V385H497Q439 381 423 345Q421 341 356 172T288 -2Q283 -11 263 -11Q244 -11 239 -2Q99 359 98 364Q93 378 82 381T43 385H19V431H25L33 430Q41 430 53 430T79 430T104 429T122 428Q217 428 232 431H240V385H226Q187 384 184 370Q184 366 235 234L286 102L377 341V349Q377 363 367 372T349 383T335 385H331V431H338Z"/>
<path stroke-width="1" id="E6-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E6-MJMATHI-47" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"/>
<path stroke-width="1" id="E6-MJMATHI-58" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/>
<path stroke-width="1" id="E6-MJMATHI-59" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"/>
<path stroke-width="1" id="E6-MJMAIN-2193" d="M473 86Q483 86 483 67Q483 63 483 61T483 56T481 53T480 50T478 48T474 47T470 46T464 44Q428 35 391 14T316 -55T264 -168Q264 -170 263 -173T262 -180T261 -184Q259 -194 251 -194Q242 -194 238 -176T221 -121T180 -49Q169 -34 155 -21T125 2T95 20T67 33T44 42T27 47L21 49Q17 53 17 67Q17 87 28 87Q33 87 42 84Q158 52 223 -45L230 -55V312Q230 391 230 482T229 591Q229 662 231 676T243 693Q244 694 251 694Q264 692 270 679V-55L277 -45Q307 1 353 33T430 76T473 86Z"/>
<path stroke-width="1" id="E6-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E6-MJMATHI-44" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/>
<path stroke-width="1" id="E6-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E6-MJSZ1-28" d="M152 251Q152 646 388 850H416Q422 844 422 841Q422 837 403 816T357 753T302 649T255 482T236 250Q236 124 255 19T301 -147T356 -251T403 -315T422 -340Q422 -343 416 -349H388Q359 -325 332 -296T271 -213T212 -97T170 56T152 251Z"/>
<path stroke-width="1" id="E6-MJSZ1-29" d="M305 251Q305 -145 69 -349H56Q43 -349 39 -347T35 -338Q37 -333 60 -307T108 -239T160 -136T204 27T221 250T204 473T160 636T108 740T60 807T35 839Q35 850 50 850H56H69Q197 743 256 566Q305 425 305 251Z"/>
<path stroke-width="1" id="E6-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
<path stroke-width="1" id="E6-MJMATHI-3B3" d="M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z"/>
<path stroke-width="1" id="E6-MJMAIN-2191" d="M27 414Q17 414 17 433Q17 437 17 439T17 444T19 447T20 450T22 452T26 453T30 454T36 456Q80 467 120 494T180 549Q227 607 238 678Q240 694 251 694Q259 694 261 684Q261 677 265 659T284 608T320 549Q340 525 363 507T405 479T440 463T467 455T479 451Q483 447 483 433Q483 413 472 413Q467 413 458 416Q342 448 277 545L270 555V-179Q262 -193 252 -193H250H248Q236 -193 230 -179V555L223 545Q192 499 146 467T70 424T27 414Z"/>
<path stroke-width="1" id="E6-MJMATHI-3BB" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"/>
<path stroke-width="1" id="E6-MJMAIN-63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"/>
<path stroke-width="1" id="E6-MJMAIN-79" d="M69 -66Q91 -66 104 -80T118 -116Q118 -134 109 -145T91 -160Q84 -163 97 -166Q104 -168 111 -168Q131 -168 148 -159T175 -138T197 -106T213 -75T225 -43L242 0L170 183Q150 233 125 297Q101 358 96 368T80 381Q79 382 78 382Q66 385 34 385H19V431H26L46 430Q65 430 88 429T122 428Q129 428 142 428T171 429T200 430T224 430L233 431H241V385H232Q183 385 185 366L286 112Q286 113 332 227L376 341V350Q376 365 366 373T348 383T334 385H331V431H337H344Q351 431 361 431T382 430T405 429T422 429Q477 429 503 431H508V385H497Q441 380 422 345Q420 343 378 235T289 9T227 -131Q180 -204 113 -204Q69 -204 44 -177T19 -116Q19 -89 35 -78T69 -66Z"/>
<path stroke-width="1" id="E6-MJMAIN-69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z"/>
<path stroke-width="1" id="E6-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
<path stroke-width="1" id="E6-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E6-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
<g transform="translate(167,0)">
<g transform="translate(-11,0)">
<g transform="translate(0,3953)">
 <use xlink:href="#E6-MJCAL-4C" x="0" y="0"/>
<g transform="translate(690,-150)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-74"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-72" x="389" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-61" x="782" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-6E" x="1282" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-73" x="1839" y="0"/>
</g>
</g>
</g>
<g transform="translate(2359,0)">
<g transform="translate(0,3953)">
 <use xlink:href="#E6-MJMAIN-3D" x="277" y="0"/>
<g transform="translate(1334,0)">
 <use xlink:href="#E6-MJCAL-4C" x="0" y="0"/>
<g transform="translate(690,-150)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-61"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-64" x="500" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-76" x="1057" y="0"/>
</g>
</g>
<g transform="translate(3412,0)">
 <use xlink:href="#E6-MJSZ1-28"/>
<g transform="translate(458,0)">
 <use xlink:href="#E6-MJMATHI-47" x="0" y="0"/>
<g transform="translate(786,-150)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-58" x="0" y="0"/>
<g transform="translate(602,0)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E6-MJMAIN-2193" x="716" y="-271"/>
</g>
</g>
</g>
 <use xlink:href="#E6-MJMAIN-2C" x="2717" y="0"/>
<g transform="translate(3162,0)">
 <use xlink:href="#E6-MJMATHI-44" x="0" y="0"/>
<g transform="translate(828,-150)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E6-MJMAIN-2193" x="716" y="-271"/>
</g>
</g>
 <use xlink:href="#E6-MJMAIN-2C" x="4859" y="0"/>
 <use xlink:href="#E6-MJMATHI-58" x="5305" y="0"/>
 <use xlink:href="#E6-MJMAIN-2C" x="6157" y="0"/>
<g transform="translate(6602,0)">
 <use xlink:href="#E6-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-2193" x="822" y="-213"/>
</g>
 <use xlink:href="#E6-MJSZ1-29" x="7638" y="-1"/>
</g>
</g>
<g transform="translate(0,2385)">
 <use xlink:href="#E6-MJMAIN-2B" x="222" y="0"/>
<g transform="translate(1222,0)">
 <use xlink:href="#E6-MJCAL-4C" x="0" y="0"/>
<g transform="translate(690,-150)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-61"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-64" x="500" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-76" x="1057" y="0"/>
</g>
</g>
<g transform="translate(3301,0)">
 <use xlink:href="#E6-MJSZ1-28"/>
<g transform="translate(458,0)">
 <use xlink:href="#E6-MJMATHI-47" x="0" y="0"/>
<g transform="translate(786,-150)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E6-MJMAIN-2193" x="716" y="-271"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-58" x="1087" y="0"/>
</g>
</g>
 <use xlink:href="#E6-MJMAIN-2C" x="2717" y="0"/>
<g transform="translate(3162,0)">
 <use xlink:href="#E6-MJMATHI-44" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-58" x="1171" y="-213"/>
</g>
 <use xlink:href="#E6-MJMAIN-2C" x="4693" y="0"/>
<g transform="translate(5138,0)">
 <use xlink:href="#E6-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-2193" x="822" y="-213"/>
</g>
 <use xlink:href="#E6-MJMAIN-2C" x="6174" y="0"/>
 <use xlink:href="#E6-MJMATHI-58" x="6619" y="0"/>
 <use xlink:href="#E6-MJSZ1-29" x="7471" y="-1"/>
</g>
</g>
<g transform="translate(0,817)">
 <use xlink:href="#E6-MJMAIN-2B" x="222" y="0"/>
 <use xlink:href="#E6-MJMATHI-3B3" x="1222" y="0"/>
<g transform="translate(1766,0)">
 <use xlink:href="#E6-MJCAL-4C" x="0" y="0"/>
<g transform="translate(690,-150)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-61"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-64" x="500" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-76" x="1057" y="0"/>
</g>
</g>
<g transform="translate(3844,0)">
 <use xlink:href="#E6-MJSZ1-28"/>
<g transform="translate(458,0)">
 <use xlink:href="#E6-MJSZ1-28"/>
<g transform="translate(458,0)">
 <use xlink:href="#E6-MJMATHI-47" x="0" y="0"/>
<g transform="translate(786,-150)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-58" x="0" y="0"/>
<g transform="translate(602,0)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E6-MJMAIN-2193" x="716" y="-271"/>
</g>
</g>
</g>
 <use xlink:href="#E6-MJMAIN-2C" x="2717" y="0"/>
<g transform="translate(3162,0)">
 <use xlink:href="#E6-MJMATHI-47" x="0" y="0"/>
<g transform="translate(786,-150)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E6-MJMAIN-2193" x="716" y="-271"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-58" x="1087" y="0"/>
</g>
</g>
 <use xlink:href="#E6-MJSZ1-29" x="5420" y="-1"/>
</g>
 <use xlink:href="#E6-MJMAIN-2C" x="6504" y="0"/>
<g transform="translate(6949,0)">
 <use xlink:href="#E6-MJMATHI-44" x="0" y="0"/>
<g transform="translate(828,-150)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-58" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E6-MJMAIN-2191" x="1020" y="-271"/>
</g>
</g>
 <use xlink:href="#E6-MJMAIN-2C" x="8821" y="0"/>
<g transform="translate(9267,0)">
 <use xlink:href="#E6-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-2193" x="822" y="-213"/>
</g>
 <use xlink:href="#E6-MJMAIN-2C" x="10302" y="0"/>
<g transform="translate(10747,0)">
 <use xlink:href="#E6-MJMATHI-58" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-2191" x="1171" y="-213"/>
</g>
 <use xlink:href="#E6-MJSZ1-29" x="12030" y="-1"/>
</g>
</g>
<g transform="translate(0,-751)">
 <use xlink:href="#E6-MJMAIN-2B" x="222" y="0"/>
<g transform="translate(1222,0)">
 <use xlink:href="#E6-MJMATHI-3BB" x="0" y="0"/>
<g transform="translate(583,-150)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-63"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-79" x="444" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-63" x="972" y="0"/>
</g>
</g>
<g transform="translate(2908,0)">
 <use xlink:href="#E6-MJCAL-4C" x="0" y="0"/>
<g transform="translate(690,-150)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-63"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-79" x="444" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-63" x="972" y="0"/>
</g>
</g>
<g transform="translate(4868,0)">
 <use xlink:href="#E6-MJSZ1-28"/>
<g transform="translate(458,0)">
 <use xlink:href="#E6-MJMATHI-47" x="0" y="0"/>
<g transform="translate(786,-150)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E6-MJMAIN-2193" x="716" y="-271"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-58" x="1087" y="0"/>
</g>
</g>
 <use xlink:href="#E6-MJMAIN-2C" x="2717" y="0"/>
<g transform="translate(3162,0)">
 <use xlink:href="#E6-MJMATHI-47" x="0" y="0"/>
<g transform="translate(786,-150)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-58" x="0" y="0"/>
<g transform="translate(602,0)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E6-MJMAIN-2193" x="716" y="-271"/>
</g>
</g>
</g>
 <use xlink:href="#E6-MJSZ1-29" x="5420" y="-1"/>
</g>
</g>
<g transform="translate(0,-2319)">
 <use xlink:href="#E6-MJMAIN-2B" x="222" y="0"/>
<g transform="translate(1222,0)">
 <use xlink:href="#E6-MJMATHI-3BB" x="0" y="0"/>
<g transform="translate(583,-150)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-69"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-64" x="278" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-74" x="835" y="0"/>
</g>
</g>
<g transform="translate(2772,0)">
 <use xlink:href="#E6-MJCAL-4C" x="0" y="0"/>
<g transform="translate(690,-150)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-69"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-64" x="278" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMAIN-74" x="835" y="0"/>
</g>
</g>
<g transform="translate(4595,0)">
 <use xlink:href="#E6-MJSZ1-28"/>
<g transform="translate(458,0)">
 <use xlink:href="#E6-MJMATHI-47" x="0" y="0"/>
<g transform="translate(786,-150)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-58" x="0" y="0"/>
<g transform="translate(602,0)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E6-MJMAIN-2193" x="716" y="-271"/>
</g>
</g>
</g>
 <use xlink:href="#E6-MJSZ1-29" x="2717" y="-1"/>
</g>
</g>
<g transform="translate(0,-3887)">
 <use xlink:href="#E6-MJMAIN-2B" x="222" y="0"/>
<g transform="translate(1222,0)">
 <use xlink:href="#E6-MJMATHI-3BB" x="0" y="0"/>
<g transform="translate(583,-150)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-67" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-65" x="480" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-6F" x="947" y="0"/>
</g>
</g>
<g transform="translate(2919,0)">
 <use xlink:href="#E6-MJCAL-4C" x="0" y="0"/>
<g transform="translate(690,-150)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-67" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-65" x="480" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-6F" x="947" y="0"/>
</g>
</g>
<g transform="translate(4889,0)">
 <use xlink:href="#E6-MJSZ1-28"/>
<g transform="translate(458,0)">
 <use xlink:href="#E6-MJMATHI-47" x="0" y="0"/>
<g transform="translate(786,-150)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-58" x="0" y="0"/>
<g transform="translate(602,0)">
 <use transform="scale(0.707)" xlink:href="#E6-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E6-MJMAIN-2193" x="716" y="-271"/>
</g>
</g>
</g>
 <use xlink:href="#E6-MJSZ1-29" x="2717" y="-1"/>
</g>
</g>
</g>
</g>
</g>
</svg></span></li>
<li><p>L1损失：</p>
<span class="mjpage mjpage__block"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="24.745ex" height="4.843ex" style="vertical-align: -1.838ex;" viewbox="0 -1293.7 10654.2 2085" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-7-Title">
<title id="MathJax-SVG-7-Title">
\mathcal{L}_{r e c}=\left\|U_{Y_{\downarrow} Y}\left(\stackrel{\circ}{y_{\downarrow}}\right)-y\right\|_{1}</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E7-MJCAL-4C" d="M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z"/>
<path stroke-width="1" id="E7-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E7-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E7-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E7-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E7-MJMAIN-2225" d="M133 736Q138 750 153 750Q164 750 170 739Q172 735 172 250T170 -239Q164 -250 152 -250Q144 -250 138 -244L137 -243Q133 -241 133 -179T132 250Q132 731 133 736ZM329 739Q334 750 346 750Q353 750 361 744L362 743Q366 741 366 679T367 250T367 -178T362 -243L361 -244Q355 -250 347 -250Q335 -250 329 -239Q327 -235 327 250T329 739Z"/>
<path stroke-width="1" id="E7-MJMATHI-55" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/>
<path stroke-width="1" id="E7-MJMATHI-59" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"/>
<path stroke-width="1" id="E7-MJMAIN-2193" d="M473 86Q483 86 483 67Q483 63 483 61T483 56T481 53T480 50T478 48T474 47T470 46T464 44Q428 35 391 14T316 -55T264 -168Q264 -170 263 -173T262 -180T261 -184Q259 -194 251 -194Q242 -194 238 -176T221 -121T180 -49Q169 -34 155 -21T125 2T95 20T67 33T44 42T27 47L21 49Q17 53 17 67Q17 87 28 87Q33 87 42 84Q158 52 223 -45L230 -55V312Q230 391 230 482T229 591Q229 662 231 676T243 693Q244 694 251 694Q264 692 270 679V-55L277 -45Q307 1 353 33T430 76T473 86Z"/>
<path stroke-width="1" id="E7-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E7-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E7-MJMAIN-2218" d="M55 251Q55 328 112 386T249 444T386 388T444 249Q444 171 388 113T250 55Q170 55 113 112T55 251ZM245 403Q188 403 142 361T96 250Q96 183 141 140T250 96Q284 96 313 109T354 135T375 160Q403 197 403 250Q403 313 360 358T245 403Z"/>
<path stroke-width="1" id="E7-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E7-MJSZ2-28" d="M180 96T180 250T205 541T266 770T353 944T444 1069T527 1150H555Q561 1144 561 1141Q561 1137 545 1120T504 1072T447 995T386 878T330 721T288 513T272 251Q272 133 280 56Q293 -87 326 -209T399 -405T475 -531T536 -609T561 -640Q561 -643 555 -649H527Q483 -612 443 -568T353 -443T266 -270T205 -41Z"/>
<path stroke-width="1" id="E7-MJSZ2-29" d="M35 1138Q35 1150 51 1150H56H69Q113 1113 153 1069T243 944T330 771T391 541T416 250T391 -40T330 -270T243 -443T152 -568T69 -649H56Q43 -649 39 -647T35 -637Q65 -607 110 -548Q283 -316 316 56Q324 133 324 251Q324 368 316 445Q278 877 48 1123Q36 1137 35 1138Z"/>
<path stroke-width="1" id="E7-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E7-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E7-MJCAL-4C" x="0" y="0"/>
<g transform="translate(690,-150)">
 <use transform="scale(0.707)" xlink:href="#E7-MJMATHI-72" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E7-MJMATHI-65" x="451" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E7-MJMATHI-63" x="918" y="0"/>
</g>
 <use xlink:href="#E7-MJMAIN-3D" x="2023" y="0"/>
<g transform="translate(3080,0)">
<g transform="translate(0,1150)">
 <use xlink:href="#E7-MJMAIN-2225" x="0" y="-751"/>
 <use xlink:href="#E7-MJMAIN-2225" x="0" y="-1550"/>
</g>
<g transform="translate(500,0)">
 <use xlink:href="#E7-MJMATHI-55" x="0" y="0"/>
<g transform="translate(683,-150)">
 <use transform="scale(0.707)" xlink:href="#E7-MJMATHI-59" x="0" y="0"/>
 <use transform="scale(0.574)" xlink:href="#E7-MJMAIN-2193" x="716" y="-271"/>
 <use transform="scale(0.707)" xlink:href="#E7-MJMATHI-59" x="1087" y="0"/>
</g>
</g>
<g transform="translate(2759,0)">
 <use xlink:href="#E7-MJSZ2-28"/>
<g transform="translate(597,0)">
 <use xlink:href="#E7-MJMATHI-79" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E7-MJMAIN-2193" x="693" y="-213"/>
 <use transform="scale(0.707)" xlink:href="#E7-MJMAIN-2218" x="417" y="856"/>
</g>
 <use xlink:href="#E7-MJSZ2-29" x="1541" y="-1"/>
</g>
 <use xlink:href="#E7-MJMAIN-2212" x="5121" y="0"/>
 <use xlink:href="#E7-MJMATHI-79" x="6122" y="0"/>
<g transform="translate(6619,1150)">
 <use xlink:href="#E7-MJMAIN-2225" x="0" y="-751"/>
 <use xlink:href="#E7-MJMAIN-2225" x="0" y="-1550"/>
</g>
 <use transform="scale(0.707)" xlink:href="#E7-MJMAIN-31" x="10069" y="-970"/>
</g>
</g>
</svg></span></li>
</ul>
<h3 id="部分实验结果"><a href="#部分实验结果" class="headerlink" title="部分实验结果"></a>部分实验结果</h3><p><img src="/2020/09/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-super-resolution-Unpaired-Image-Super-Resolution-using-Pseudo-Supervision/1599702852283.png" alt></p>
<p>通过对比其它的方法，在DIV2K数据集上可以看出，在峰值信噪比和结构化相似度上均具有最好的值(值越大说明失真度越小)，同时在图片质量上可以看出去噪能力更强</p>
<p><img src="/2020/09/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-super-resolution-Unpaired-Image-Super-Resolution-using-Pseudo-Supervision/1599704534305.png" alt></p>
<p>对比其它的基于GAN的非配对超分方法，可以看出在FID上的实验效果也是最好的</p>
</body></html>]]></content>
      <categories>
        <category>super-resolution</category>
      </categories>
      <tags>
        <tag>论文阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>编程-数据结构与算法-树</title>
    <url>/2020/09/09/%E7%BC%96%E7%A8%8B-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E6%A0%91/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/09/09/w8UKTU.jpg" alt></p>
<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由层序遍历构建二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createtree</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">    root = TreeNode(nums[<span class="number">0</span>])</span><br><span class="line">    queue = deque([root])</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        node = queue.popleft()</span><br><span class="line">        <span class="keyword">if</span> nums[i]!=<span class="literal">None</span>:</span><br><span class="line">            node.left = TreeNode(nums[i])</span><br><span class="line">            queue.append(node.left)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i==len(nums):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> nums[i]!=<span class="literal">None</span>:</span><br><span class="line">            node.right = TreeNode(nums[i])</span><br><span class="line">            queue.append(node.right)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i==len(nums):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="number">7</span>]</span><br><span class="line">root = createtree(nums)</span><br><span class="line">print(root)</span><br></pre></td></tr></table></figure>
<h3 id="遍历-迭代-递归-Morris"><a href="#遍历-迭代-递归-Morris" class="headerlink" title="遍历(迭代/递归/Morris)"></a>遍历(迭代/递归/Morris)</h3><ul>
<li><p>层次遍历：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root: TreeNode)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="comment"># 迭代</span></span><br><span class="line">        <span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">        queue = deque()</span><br><span class="line">        queue.append((root,<span class="number">0</span>))</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            lens = len(queue)</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(lens):</span><br><span class="line">                node,level = queue.popleft()</span><br><span class="line">                <span class="keyword">if</span> len(res)==level:</span><br><span class="line">                    res.append([])</span><br><span class="line">                res[level].append(node.val)</span><br><span class="line">                <span class="keyword">if</span> root.left:</span><br><span class="line">                    queue.append((root.left,level+<span class="number">1</span>))</span><br><span class="line">                <span class="keyword">if</span> root.right:</span><br><span class="line">                    queue.append((root.right,level+<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># 递归</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(node,level)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> len(res)==level:</span><br><span class="line">                res.append([])</span><br><span class="line">            res[level].append(node.val)</span><br><span class="line">            <span class="keyword">if</span> node.left:</span><br><span class="line">                bfs(node.left,level+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> node.right:</span><br><span class="line">                bfs(node.right,level+<span class="number">1</span>)</span><br><span class="line">        bfs(root,<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
</li>
<li><p>前序遍历：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="comment"># 迭代</span></span><br><span class="line">        stack = [root]</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                res.append(node.val)</span><br><span class="line">                stack.extend(node.right,node.left)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 递归</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(root)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            res.append(root.val)</span><br><span class="line">            dfs(root.left)</span><br><span class="line">            dfs(root.right)</span><br><span class="line">        dfs(root)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># Morris非破坏版</span></span><br><span class="line">        res = []</span><br><span class="line">        cur = root</span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            <span class="keyword">if</span> cur.left:</span><br><span class="line">                pre = cur.left</span><br><span class="line">                <span class="keyword">while</span> pre.right <span class="keyword">and</span> pre.right!=cur:</span><br><span class="line">                    pre = pre.right</span><br><span class="line">                <span class="comment"># 当没有相连时，则相连</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> pre.right:</span><br><span class="line">                    res.append(cur.val) <span class="comment">##########</span></span><br><span class="line">                    pre.right = cur</span><br><span class="line">                    cur = cur.left</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># 已经相连时,则断开</span></span><br><span class="line">                <span class="keyword">if</span> pre.right==cur:</span><br><span class="line">                    pre.right = <span class="literal">None</span></span><br><span class="line">                    cur = cur.right</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.append(cur.val)</span><br><span class="line">                cur = cur.right</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
</li>
<li><p>中序遍历：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="comment"># 迭代</span></span><br><span class="line">        stack = []</span><br><span class="line">        node = root</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> node:</span><br><span class="line">            <span class="keyword">while</span> node:</span><br><span class="line">                stack.append(node)</span><br><span class="line">                node = node.left</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            res.append(node.val)</span><br><span class="line">            node = node.right</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># 递归</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(root)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            dfs(root.left)</span><br><span class="line">            res.append(root.val)</span><br><span class="line">            dfs(root.right)</span><br><span class="line">        helper(root)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># Morris破坏版(最后变成了一个单链表)</span></span><br><span class="line">        res = []</span><br><span class="line">        cur = root</span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            <span class="comment"># 找到左结点的右子树的最右结点与当前根结点相连，当前根结点与左子结点则断开</span></span><br><span class="line">            <span class="keyword">if</span> cur.left:</span><br><span class="line">                pre = cur.left</span><br><span class="line">                <span class="keyword">while</span> pre.right:</span><br><span class="line">                    pre = pre.right</span><br><span class="line">                pre.right = cur</span><br><span class="line">                tmp = cur</span><br><span class="line">                cur = cur.left</span><br><span class="line">                tmp.left = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.append(cur.val)</span><br><span class="line">                cur = cur.right</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># Morris非破坏版</span></span><br><span class="line">        res = []</span><br><span class="line">        cur = root</span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            <span class="keyword">if</span> cur.left:</span><br><span class="line">                pre = cur.left</span><br><span class="line">                <span class="keyword">while</span> pre.right <span class="keyword">and</span> pre.right!=cur:</span><br><span class="line">                    pre = pre.right</span><br><span class="line">                <span class="comment"># 当没有相连时，则相连</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> pre.right:</span><br><span class="line">                    pre.right = cur</span><br><span class="line">                    cur = cur.left</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># 已经相连时,则断开</span></span><br><span class="line">                <span class="keyword">if</span> pre.right==cur:</span><br><span class="line">                    pre.right = <span class="literal">None</span></span><br><span class="line">                    res.append(cur.val) <span class="comment">##########</span></span><br><span class="line">                    cur = cur.right</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.append(cur.val)</span><br><span class="line">                cur = cur.right</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
</li>
<li><p>后序遍历</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 后序遍历</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="comment"># 迭代</span></span><br><span class="line">        stack = []</span><br><span class="line">        node = root</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> node:</span><br><span class="line">            <span class="keyword">while</span> node:</span><br><span class="line">                stack.append(node)</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    node = node.left</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    node = node.right</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            res.append(node.val)</span><br><span class="line">            <span class="keyword">if</span> stack <span class="keyword">and</span> stack[<span class="number">-1</span>].right!=node:</span><br><span class="line">                node = stack[<span class="number">-1</span>].right</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># 递归</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(root)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            dfs(root.left)</span><br><span class="line">            dfs(root.right)</span><br><span class="line">            res.append(root.val)</span><br><span class="line">        dfs(root)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><ul>
<li><p>由前序，中序构建</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buildTree</span><span class="params">(self, preorder: List[int], inorder: List[int])</span> -&gt; TreeNode:</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(preorder,inorder)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> inorder:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            root = TreeNode(preorder.pop(<span class="number">0</span>))</span><br><span class="line">            loc = inorder.index(root.val)</span><br><span class="line">            root.left = helper(preorder,inorder[:loc])</span><br><span class="line">            root.right = helper(preorder,inorder[loc+<span class="number">1</span>:])</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">return</span> helper(preorder,inorder)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># hashmap会快很多</span></span><br><span class="line">        hashmap = &#123;v:k <span class="keyword">for</span> k,v <span class="keyword">in</span> enumerate(inorder)&#125;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(left,right)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> left&gt;right:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            curval = preorder.pop(<span class="number">0</span>) <span class="comment">##############</span></span><br><span class="line">            cur = TreeNode(curval)</span><br><span class="line">            idx = hashmap[curval]</span><br><span class="line">            cur.left = helper(left,idx<span class="number">-1</span>) <span class="comment">#############</span></span><br><span class="line">            cur.right = helper(idx+<span class="number">1</span>,right) <span class="comment">###########</span></span><br><span class="line">            <span class="keyword">return</span> cur</span><br><span class="line">        <span class="keyword">return</span> helper(<span class="number">0</span>,len(inorder)<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>由中，后序构建</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buildTree</span><span class="params">(self, inorder: List[int], postorder: List[int])</span> -&gt; TreeNode:</span></span><br><span class="line">        hashmap = &#123;v:k <span class="keyword">for</span> k,v <span class="keyword">in</span> enumerate(inorder)&#125;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(left,right)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> left&gt;right:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            curval = postorder.pop() <span class="comment">############</span></span><br><span class="line">            cur = TreeNode(curval)</span><br><span class="line">            idx = hashmap[curval]</span><br><span class="line">            cur.right = helper(idx+<span class="number">1</span>,right) <span class="comment">###########</span></span><br><span class="line">            cur.left = helper(left,idx<span class="number">-1</span>) <span class="comment">###############</span></span><br><span class="line">            <span class="keyword">return</span> cur</span><br><span class="line">        <span class="keyword">return</span> helper(<span class="number">0</span>,len(inorder)<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY29uc3RydWN0LWJpbmFyeS10cmVlLWZyb20tcHJlb3JkZXItYW5kLXBvc3RvcmRlci10cmF2ZXJzYWwv" title="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/">根据前序和后序遍历构造二叉树<i class="fa fa-external-link"></i></span>不唯一</p>
<p>考虑：前序树的第一个结点和后序树的最后一个结点是根结点，所以前序树的第二个结点是左子树的根结点(若有左子树)，则找到与它相同的后序树的结点，以其为分界点，则可以将其分为左子树和右子树。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">constructFromPrePost</span><span class="params">(self, pre, post)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pre:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        node = TreeNode(pre[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> len(pre) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        i = post.index(pre[<span class="number">1</span>])</span><br><span class="line">        node.left = self.constructFromPrePost(pre[<span class="number">1</span>:i+<span class="number">2</span>], post[:i+<span class="number">1</span>])</span><br><span class="line">        node.right = self.constructFromPrePost(pre[i+<span class="number">2</span>:], post[i+<span class="number">1</span>:<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">return</span> node</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="常见题"><a href="#常见题" class="headerlink" title="常见题"></a>常见题</h3><hr>
<ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZXItY2hhLXNvdS1zdW8tc2h1LWRlLXp1aS1qaW4tZ29uZy1nb25nLXp1LXhpYW4tbGNvZi8=" title="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof/">面试题68 - I. 二叉搜索树的最近公共祖先<i class="fa fa-external-link"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">        <span class="comment"># def helper(root):</span></span><br><span class="line">        <span class="comment">#     if p.val&lt;root.val and q.val&lt;root.val:</span></span><br><span class="line">        <span class="comment">#         return helper(root.left)</span></span><br><span class="line">        <span class="comment">#     elif p.val&gt;root.val and q.val&gt;root.val:</span></span><br><span class="line">        <span class="comment">#         return helper(root.right)</span></span><br><span class="line">        <span class="comment">#     else:</span></span><br><span class="line">        <span class="comment">#         return root</span></span><br><span class="line">        <span class="comment"># return helper(root)</span></span><br><span class="line"></span><br><span class="line">        node = root</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            <span class="keyword">if</span> p.val&lt;node.val <span class="keyword">and</span> q.val&lt;node.val:</span><br><span class="line">                node = node.left</span><br><span class="line">            <span class="keyword">elif</span> p.val&gt;node.val <span class="keyword">and</span> q.val&gt;node.val:</span><br><span class="line">                node = node.right</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> node</span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZXItY2hhLXNodS1kZS16dWktamluLWdvbmctZ29uZy16dS14aWFuLWxjb2Yv" title="https://leetcode-cn.com/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/">面试题68 - II. 二叉树的最近公共祖先<i class="fa fa-external-link"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: TreeNode, p: TreeNode, q: TreeNode)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="comment"># # 找到p或q的位置，若不在同一子树，则返回该根结点，否则返回第一个</span></span><br><span class="line">        <span class="comment"># def helper(root):</span></span><br><span class="line">        <span class="comment">#     if not root or root==p or root==q:</span></span><br><span class="line">        <span class="comment">#         return root</span></span><br><span class="line">        <span class="comment">#     left = helper(root.left)</span></span><br><span class="line">        <span class="comment">#     right = helper(root.right)</span></span><br><span class="line">        <span class="comment">#     if not left:</span></span><br><span class="line">        <span class="comment">#         return right</span></span><br><span class="line">        <span class="comment">#     if not right:</span></span><br><span class="line">        <span class="comment">#         return left</span></span><br><span class="line">        <span class="comment">#     return root</span></span><br><span class="line">        <span class="comment"># return helper(root)</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># def helper(root):</span></span><br><span class="line">        <span class="comment">#     nonlocal res</span></span><br><span class="line">        <span class="comment">#     if not root:</span></span><br><span class="line">        <span class="comment">#         return False</span></span><br><span class="line">        <span class="comment">#     left = helper(root.left)</span></span><br><span class="line">        <span class="comment">#     right = helper(root.right)</span></span><br><span class="line">        <span class="comment">#     mid = p==root or q==root</span></span><br><span class="line">        <span class="comment">#     if mid+left+right&gt;=2:</span></span><br><span class="line">        <span class="comment">#         res = root</span></span><br><span class="line">        <span class="comment">#     return mid or left or right</span></span><br><span class="line">        <span class="comment"># res = TreeNode(None)</span></span><br><span class="line">        <span class="comment"># helper(root)</span></span><br><span class="line">        <span class="comment"># return res</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdmFsaWRhdGUtYmluYXJ5LXNlYXJjaC10cmVlLw==" title="https://leetcode-cn.com/problems/validate-binary-search-tree/">98. 验证二叉搜索树<i class="fa fa-external-link"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidBST</span><span class="params">(self, root: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># # 递归</span></span><br><span class="line">        <span class="comment"># def helper(root,minval,maxval):</span></span><br><span class="line">        <span class="comment">#     if not root:</span></span><br><span class="line">        <span class="comment">#         return True</span></span><br><span class="line">        <span class="comment">#     if root.val&lt;=minval or root.val&gt;=maxval:</span></span><br><span class="line">        <span class="comment">#         return False</span></span><br><span class="line">        <span class="comment">#     return helper(root.left,minval,root.val) and helper(root.right,root.val,maxval)</span></span><br><span class="line">        <span class="comment"># return helper(root,float('-inf'),float('inf'))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 中序迭代 有序</span></span><br><span class="line">        stack = []</span><br><span class="line">        node = root</span><br><span class="line">        lower = float(<span class="string">'-inf'</span>)</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> node:</span><br><span class="line">            <span class="keyword">while</span> node:</span><br><span class="line">                stack.append(node)</span><br><span class="line">                node = node.left</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> node.val&lt;=lower:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            lower = node.val</span><br><span class="line">            node = node.right</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2h1LWRlLXppLWppZS1nb3UtbGNvZi8=" title="https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof/">树的子结构<i class="fa fa-external-link"></i></span>题目说可能有空</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSubStructure</span><span class="params">(self, A: TreeNode, B: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> A <span class="keyword">or</span> <span class="keyword">not</span> B:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(A,B)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> B:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> A:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> A.val==B.val <span class="keyword">and</span> helper(A.left,B.left) <span class="keyword">and</span> helper(A.right,B.right)</span><br><span class="line">        <span class="keyword">return</span> helper(A,B) <span class="keyword">or</span> self.isSubStructure(A.left,B) <span class="keyword">or</span> self.isSubStructure(A.right,B)</span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc3VidHJlZS1vZi1hbm90aGVyLXRyZWUv" title="https://leetcode-cn.com/problems/subtree-of-another-tree/">572. 另一个树的子树<i class="fa fa-external-link"></i></span>注意子树跟子结构的区别，且题目说非空</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSubtree</span><span class="params">(self, s: TreeNode, t: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(s,t)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> t <span class="keyword">and</span> <span class="keyword">not</span> s:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> t <span class="keyword">or</span> <span class="keyword">not</span> s:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> s.val==t.val <span class="keyword">and</span> helper(s.left,t.left) <span class="keyword">and</span> helper(s.right,t.right)</span><br><span class="line">        <span class="keyword">return</span> helper(s,t) <span class="keyword">or</span> self.isSubtree(s.left,t) <span class="keyword">or</span> self.isSubtree(s.right,t)</span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZXItY2hhLXNodS1kZS1qaW5nLXhpYW5nLWxjb2Yv" title="https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/">二叉树的镜像<i class="fa fa-external-link"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mirrorTree</span><span class="params">(self, root: TreeNode)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        left = self.mirrorTree(root.right)</span><br><span class="line">        right = self.mirrorTree(root.left)</span><br><span class="line">        root.left,root.right = left,right</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZHVpLWNoZW5nLWRlLWVyLWNoYS1zaHUtbGNvZi8=" title="https://leetcode-cn.com/problems/dui-cheng-de-er-cha-shu-lcof/">对称的二叉树<i class="fa fa-external-link"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSymmetric</span><span class="params">(self, root: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># 递归</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(left,right)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> left <span class="keyword">and</span> <span class="keyword">not</span> right:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> left <span class="keyword">or</span> <span class="keyword">not</span> right:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> left.val==right.val <span class="keyword">and</span> helper(left.left,right.right) <span class="keyword">and</span> helper(left.right,right.left)</span><br><span class="line">        <span class="keyword">return</span> helper(root,root)</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># 迭代，类似层序遍历</span></span><br><span class="line">        stack = [(root,root)]</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            left,right = stack.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> left <span class="keyword">and</span> <span class="keyword">not</span> right:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> left <span class="keyword">or</span> <span class="keyword">not</span> right:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> left.val!=right.val:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            stack.append((left.left,right.right))</span><br><span class="line">            stack.append((left.right,right.left))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZXItY2hhLXNvdS1zdW8tc2h1LWRlLWhvdS14dS1iaWFuLWxpLXh1LWxpZS1sY29mLw==" title="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/">二叉搜索树的后序遍历序列<i class="fa fa-external-link"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">verifyPostorder</span><span class="params">(self, postorder: List[int])</span> -&gt; bool:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(i,j)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> i&gt;=j:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            l = i</span><br><span class="line">            <span class="comment"># 找到第一个大于j的元素的位置，即左右子树的分隔点</span></span><br><span class="line">            <span class="keyword">while</span> postorder[l]&lt;postorder[j]:</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">            m = l <span class="comment"># 找到第一个大于j位置的元素位置</span></span><br><span class="line">            <span class="keyword">while</span> postorder[l]&gt;postorder[j]:</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 判断l==j，表明m之后的元素确实都大于j的元素，即满足二叉搜索树特性，左|右|根，再循环判断左子树及右子树</span></span><br><span class="line">            <span class="keyword">return</span> l==j <span class="keyword">and</span> helper(i,m<span class="number">-1</span>) <span class="keyword">and</span> helper(m,j<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> helper(<span class="number">0</span>,len(postorder)<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZXItY2hhLXNodS16aG9uZy1oZS13ZWktbW91LXlpLXpoaS1kZS1sdS1qaW5nLWxjb2Yv" title="https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/"> 二叉树中和为某一值的路径<i class="fa fa-external-link"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pathSum</span><span class="params">(self, root: TreeNode, sum: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(root,target,ans)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right:</span><br><span class="line">                <span class="keyword">if</span> target==root.val:</span><br><span class="line">                    res.append(ans+[root.val])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> root.left:</span><br><span class="line">                helper(root.left,target-root.val,ans+[root.val])</span><br><span class="line">            <span class="keyword">if</span> root.right:</span><br><span class="line">                helper(root.right,target-root.val,ans+[root.val])</span><br><span class="line">        res = []</span><br><span class="line">        helper(root,sum,ans=[])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWluaW11bS1kZXB0aC1vZi1iaW5hcnktdHJlZQ==" title="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree">111.二叉树的最小深度<i class="fa fa-external-link"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDepth</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># # dfs</span></span><br><span class="line">        <span class="comment"># if not root:</span></span><br><span class="line">        <span class="comment">#     return 0</span></span><br><span class="line">        <span class="comment"># # 确保是到叶子结点</span></span><br><span class="line">        <span class="comment"># def helper(root):</span></span><br><span class="line">        <span class="comment">#     if not root.left and not root.right:</span></span><br><span class="line">        <span class="comment">#         return 1</span></span><br><span class="line">        <span class="comment">#     if root.left and root.right:</span></span><br><span class="line">        <span class="comment">#         return 1+min(helper(root.left),helper(root.right))</span></span><br><span class="line">        <span class="comment">#     if root.left:</span></span><br><span class="line">        <span class="comment">#         return 1+helper(root.left)</span></span><br><span class="line">        <span class="comment">#     if root.right:</span></span><br><span class="line">        <span class="comment">#         return 1+helper(root.right)</span></span><br><span class="line">        <span class="comment"># return helper(root)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># bfs</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">        queue = deque([(root,<span class="number">1</span>)])</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(queue)):</span><br><span class="line">                node,depth = queue.popleft()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> node.left <span class="keyword">and</span> <span class="keyword">not</span> node.right:</span><br><span class="line">                    <span class="keyword">return</span> depth</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    queue.append((node.right,depth+<span class="number">1</span>))</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    queue.append((node.left,depth+<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWF4aW11bS1kZXB0aC1vZi1iaW5hcnktdHJlZS8=" title="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">二叉树的最大深度<i class="fa fa-external-link"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + max(self.maxDepth(root.right),self.maxDepth(root.left))</span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdW5pcXVlLWJpbmFyeS1zZWFyY2gtdHJlZXMtaWkv" title="https://leetcode-cn.com/problems/unique-binary-search-trees-ii/">不同的二叉搜索树 II<i class="fa fa-external-link"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generateTrees</span><span class="params">(self, n: int)</span> -&gt; List[TreeNode]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(left,right)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> left&gt;right:</span><br><span class="line">                <span class="keyword">return</span> [<span class="literal">None</span>]</span><br><span class="line">            tree = []</span><br><span class="line">            <span class="comment"># i为根结点</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(left,right+<span class="number">1</span>):</span><br><span class="line">                lefttree = helper(left,i<span class="number">-1</span>)</span><br><span class="line">                righttree = helper(i+<span class="number">1</span>,right)</span><br><span class="line">                <span class="comment"># 从可能的子树中进行排列组合</span></span><br><span class="line">                <span class="keyword">for</span> l <span class="keyword">in</span> lefttree:</span><br><span class="line">                    <span class="keyword">for</span> r <span class="keyword">in</span> righttree:</span><br><span class="line">                        cur = TreeNode(i)</span><br><span class="line">                        cur.left = l</span><br><span class="line">                        cur.right = r</span><br><span class="line">                        tree.append(cur)</span><br><span class="line">            <span class="keyword">return</span> tree</span><br><span class="line">        <span class="keyword">return</span> helper(<span class="number">1</span>,n) <span class="keyword">if</span> n&gt;=<span class="number">1</span> <span class="keyword">else</span> []</span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaW52ZXJ0LWJpbmFyeS10cmVlLw==" title="https://leetcode-cn.com/problems/invert-binary-tree/">翻转二叉树<i class="fa fa-external-link"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">invertTree</span><span class="params">(self, root: TreeNode)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(root)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            left = helper(root.right)</span><br><span class="line">            right = helper(root.left)</span><br><span class="line">            root.left,root.right = left,right</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">return</span> helper(root)</span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY29udmVydC1zb3J0ZWQtYXJyYXktdG8tYmluYXJ5LXNlYXJjaC10cmVlLw==" title="https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/">将有序数组转换为二叉搜索树<i class="fa fa-external-link"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortedArrayToBST</span><span class="params">(self, nums: List[int])</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(left,right)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> left&gt;right:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            mid = (left+right+<span class="number">1</span>)&gt;&gt;<span class="number">1</span></span><br><span class="line">            cur = TreeNode(nums[mid])</span><br><span class="line">            cur.left = helper(left,mid<span class="number">-1</span>)</span><br><span class="line">            cur.right = helper(mid+<span class="number">1</span>,right)</span><br><span class="line">            <span class="keyword">return</span> cur</span><br><span class="line">        <span class="keyword">return</span> helper(<span class="number">0</span>,len(nums)<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZGlhbWV0ZXItb2YtYmluYXJ5LXRyZWUv" title="https://leetcode-cn.com/problems/diameter-of-binary-tree/">二叉树的直径<i class="fa fa-external-link"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">diameterOfBinaryTree</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">        res = <span class="number">1</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(root)</span>:</span></span><br><span class="line">            <span class="keyword">nonlocal</span> res</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            leftlen = helper(root.left)</span><br><span class="line">            rightlen = helper(root.right)</span><br><span class="line">            res = max(res,<span class="number">1</span>+leftlen+rightlen)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>+max(leftlen,rightlen)</span><br><span class="line">        helper(root)</span><br><span class="line">        <span class="keyword">return</span> res<span class="number">-1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbG9uZ2VzdC11bml2YWx1ZS1wYXRoLw==" title="https://leetcode-cn.com/problems/longest-univalue-path/">最长同值路径<i class="fa fa-external-link"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestUnivaluePath</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        res = <span class="number">1</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(root)</span>:</span></span><br><span class="line">            <span class="keyword">nonlocal</span> res</span><br><span class="line">            leftlen,rightlen = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> root.left:</span><br><span class="line">                leftlen = helper(root.left)</span><br><span class="line">            <span class="keyword">if</span> root.right:</span><br><span class="line">                rightlen = helper(root.right)</span><br><span class="line">            <span class="keyword">if</span> root.left <span class="keyword">and</span> root.right <span class="keyword">and</span> root.val==root.left.val <span class="keyword">and</span> root.val==root.right.val:</span><br><span class="line">                res = max(res,<span class="number">1</span>+leftlen+rightlen)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>+max(leftlen,rightlen)</span><br><span class="line">            <span class="keyword">if</span> root.left <span class="keyword">and</span> root.val==root.left.val:</span><br><span class="line">                res = max(res,<span class="number">1</span>+leftlen)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>+leftlen</span><br><span class="line">            <span class="keyword">if</span> root.right <span class="keyword">and</span> root.val==root.right.val:</span><br><span class="line">                res = max(res,<span class="number">1</span>+rightlen)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>+rightlen</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        helper(root)</span><br><span class="line">        <span class="keyword">return</span> res<span class="number">-1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmluYXJ5LXRyZWUtbWF4aW11bS1wYXRoLXN1bS8=" title="https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/">124. 二叉树中的最大路径和<i class="fa fa-external-link"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxPathSum</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">        res = float(<span class="string">'-inf'</span>)</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(root)</span>:</span></span><br><span class="line">            <span class="keyword">nonlocal</span> res</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="comment"># 如果是负的，宁愿不加</span></span><br><span class="line">            left = max(helper(root.left),<span class="number">0</span>)</span><br><span class="line">            right = max(helper(root.right),<span class="number">0</span>)</span><br><span class="line">            res = max(res,left+right+root.val)</span><br><span class="line">            <span class="keyword">return</span> max(left,right) + root.val</span><br><span class="line">        helper(root)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmxhdHRlbi1iaW5hcnktdHJlZS10by1saW5rZWQtbGlzdC8=" title="https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/">二叉树展开为链表<i class="fa fa-external-link"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flatten</span><span class="params">(self, root: TreeNode)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify root in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># morris的变体</span></span><br><span class="line">        cur = root</span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            <span class="keyword">if</span> cur.left:</span><br><span class="line">                pre = cur.left</span><br><span class="line">                <span class="keyword">while</span> pre.right:</span><br><span class="line">                    pre = pre.right</span><br><span class="line">                pre.right = cur.right</span><br><span class="line">                cur.right = cur.left</span><br><span class="line">                cur.left = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = cur.right</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 类似后序跟morris的结合</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(root)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            helper(root.left)</span><br><span class="line">            helper(root.right)</span><br><span class="line">            <span class="keyword">if</span> root.left:</span><br><span class="line">                pre = root.left</span><br><span class="line">                <span class="keyword">while</span> pre.right:</span><br><span class="line">                    pre = pre.right</span><br><span class="line">                pre.right = root.right</span><br><span class="line">                root.right = root.left</span><br><span class="line">                root.left = <span class="literal">None</span></span><br><span class="line">        helper(root)</span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmluYXJ5LXRyZWUtcmlnaHQtc2lkZS12aWV3Lw==" title="https://leetcode-cn.com/problems/binary-tree-right-side-view/">二叉树的右视图<i class="fa fa-external-link"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rightSideView</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(root,level)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> len(res)==level:</span><br><span class="line">                res.append(<span class="number">0</span>)</span><br><span class="line">            res[level] = root.val</span><br><span class="line">            helper(root.left,level+<span class="number">1</span>)</span><br><span class="line">            helper(root.right,level+<span class="number">1</span>)</span><br><span class="line">        helper(root,<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHJpbS1hLWJpbmFyeS1zZWFyY2gtdHJlZS8=" title="https://leetcode-cn.com/problems/trim-a-binary-search-tree/">修剪二叉搜索树<i class="fa fa-external-link"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trimBST</span><span class="params">(self, root: TreeNode, L: int, R: int)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(root)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">if</span> root.val&gt;R:</span><br><span class="line">                <span class="keyword">return</span> helper(root.left)</span><br><span class="line">            <span class="keyword">if</span> root.val&lt;L:</span><br><span class="line">                <span class="keyword">return</span> helper(root.right)</span><br><span class="line">            root.left = helper(root.left)</span><br><span class="line">            root.right = helper(root.right)</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">return</span> helper(root)</span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY29udmVydC1ic3QtdG8tZ3JlYXRlci10cmVlLw==" title="https://leetcode-cn.com/problems/convert-bst-to-greater-tree/">把二叉搜索树转换为累加树<i class="fa fa-external-link"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convertBST</span><span class="params">(self, root: TreeNode)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="comment"># 反序中序遍历</span></span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(root)</span>:</span></span><br><span class="line">            <span class="keyword">nonlocal</span> total</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            helper(root.right)</span><br><span class="line">            total += root.val</span><br><span class="line">            root.val = total</span><br><span class="line">            helper(root.left)</span><br><span class="line">        helper(root)</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">        stack = []</span><br><span class="line">        node = root</span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> node:</span><br><span class="line">            <span class="keyword">while</span> node:</span><br><span class="line">                stack.append(node)</span><br><span class="line">                node = node.right</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                total += node.val</span><br><span class="line">                node.val = total</span><br><span class="line">                node = node.left</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcGluZy1oZW5nLWVyLWNoYS1zaHUtbGNvZi8=" title="https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof/">面试题55 - II. 平衡二叉树<i class="fa fa-external-link"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isBalanced</span><span class="params">(self, root: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(root)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            left = helper(root.left)</span><br><span class="line">            <span class="keyword">if</span> left==<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">            right = helper(root.right)</span><br><span class="line">            <span class="keyword">if</span> right==<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">            <span class="keyword">if</span> abs(left-right)&gt;<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>+max(left,right)</span><br><span class="line">        <span class="keyword">return</span> helper(root)!=<span class="number">-1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2hlY2stY29tcGxldGVuZXNzLW9mLWEtYmluYXJ5LXRyZWUv" title="https://leetcode-cn.com/problems/check-completeness-of-a-binary-tree/">958. 二叉树的完全性检验<i class="fa fa-external-link"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isCompleteTree</span><span class="params">(self, root: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">        queue = deque([(root,<span class="number">1</span>)])</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(queue)):</span><br><span class="line">                node,i = queue.popleft()</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> count&lt;i:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">if</span> node:</span><br><span class="line">                    queue.append((node.left,<span class="number">2</span>*i))</span><br><span class="line">                    queue.append((node.right,<span class="number">2</span>*i+<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>*<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZ3JhcGgtdmFsaWQtdHJlZS8=" title="https://leetcode-cn.com/problems/graph-valid-tree/">261. 以图判树<i class="fa fa-external-link"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validTree</span><span class="params">(self, n: int, edges: List[List[int]])</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># class UF:</span></span><br><span class="line">        <span class="comment">#     def __init__(self,n):</span></span><br><span class="line">        <span class="comment">#         self.parents = [i for i in range(n)]</span></span><br><span class="line">        <span class="comment">#         self.rank = [0 for _ in range(n)]</span></span><br><span class="line">        <span class="comment">#         self.size = [1 for _ in range(n)]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#     def find(self,p):</span></span><br><span class="line">        <span class="comment">#         if self.parents[p]!=p:</span></span><br><span class="line">        <span class="comment">#             self.parents[p] = self.find(self.parents[p])</span></span><br><span class="line">        <span class="comment">#         return self.parents[p]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#     def union(self,p,q):</span></span><br><span class="line">        <span class="comment">#         pr,qr = self.find(p),self.find(q)</span></span><br><span class="line">        <span class="comment">#         if pr==qr:</span></span><br><span class="line">        <span class="comment">#             return</span></span><br><span class="line">        <span class="comment">#         if self.rank[pr]&gt;self.rank[qr]:</span></span><br><span class="line">        <span class="comment">#             pr,qr = qr,pr</span></span><br><span class="line">        <span class="comment">#         self.parents[qr] = pr</span></span><br><span class="line">        <span class="comment">#         if self.rank[pr]==self.rank[qr]:</span></span><br><span class="line">        <span class="comment">#             self.rank[pr] += 1</span></span><br><span class="line">        <span class="comment">#         self.size[pr] += self.size[qr]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># if len(edges)!=n-1:</span></span><br><span class="line">        <span class="comment">#     return False</span></span><br><span class="line">        <span class="comment"># uf = UF(n)</span></span><br><span class="line">        <span class="comment"># for i,j in edges:</span></span><br><span class="line">        <span class="comment">#     uf.union(i,j)</span></span><br><span class="line">        <span class="comment"># # 如果能构成一个团</span></span><br><span class="line">        <span class="comment"># for i in uf.size:</span></span><br><span class="line">        <span class="comment">#     if i==n:</span></span><br><span class="line">        <span class="comment">#         return True</span></span><br><span class="line">        <span class="comment"># return False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(edges)!=n<span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        adj = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="keyword">for</span> i,j <span class="keyword">in</span> edges:</span><br><span class="line">            adj[i].append(j)</span><br><span class="line">            adj[j].append(i)</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(root)</span>:</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> adj[root]:</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                    visited.add(i)</span><br><span class="line">                    dfs(i)</span><br><span class="line">        visited = set()</span><br><span class="line">        visited.add(<span class="number">0</span>)</span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> len(visited)==n</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
</search>
